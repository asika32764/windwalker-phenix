{"version":3,"sources":["form.js"],"names":["$","PhoenixForm","form","PhoenixFormElement","PhoenixJQueryPlugin","$form","options","phoenix","length","mainSelector","indexOf","attr","substr","data","css","$csrf","append","extend","constructor","defaultOptions","bindEvents","find","on","e","trigger","currentTarget","button","$button","action","target","query","url","queries","method","customMethod","methodInput","val","input","flatted","flattenObject","each","key","value","fieldName","buildFieldName","submit","post","ob","toReturn","i","hasOwnProperty","flatObject","x","field","names","split","first","shift","map","name","join","window","jQuery"],"mappings":"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","sourcesContent":["/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\n($ => {\n  class PhoenixForm extends PhoenixJQueryPlugin {\n    static get is() {\n      return 'Form';\n    }\n\n    static get proxies() {\n      return {\n        form: 'createPlugin'\n      };\n    }\n\n    /**\n     * Plugin name.\n     * @returns {string}\n     */\n    static get pluginName() {\n      return 'form';\n    }\n\n    static get pluginClass() {\n      return PhoenixFormElement;\n    }\n\n    /**\n     * Default options.\n     * @returns {Object}\n     */\n    static get defaultOptions() {\n      return {};\n    }\n  }\n\n  class PhoenixFormElement {\n    /**\n     * Constructor.\n     * @param {jQuery}      $form\n     * @param {Object}      options\n     * @param {PhoenixCore} phoenix\n     */\n    constructor($form, options, phoenix) {\n      // If form not found, create one\n      if ($form.length === 0) {\n        $form = $('<form>');\n\n        if (options.mainSelector.indexOf('#') === 0) {\n          $form.attr('id', options.mainSelector.substr(1));\n          $form.attr('name', options.mainSelector.substr(1));\n        }\n\n        $form.attr('action', 'post');\n        $form.attr('enctype', 'multipart/form-data');\n        $form.attr('novalidate', 'true');\n        $form.attr('action', phoenix.data('phoenix.uri')['full']);\n        $form.css('display', 'none');\n\n        const $csrf = $('<input type=\"hidden\" value=\"\" name=\"\">');\n        $csrf.attr('name', phoenix.data('csrfToken'));\n\n        $form.append($csrf);\n\n        $('body').append($form);\n      }\n\n      options = $.extend(true, {}, this.constructor.defaultOptions, options);\n\n      this.form = $form;\n      this.options = options;\n\n      this.bindEvents();\n    }\n\n    bindEvents() {\n      if (this.form.attr('data-toolbar')) {\n        $(this.form.attr('data-toolbar')).find('*[data-action]').on('click', (e) => {\n          this.form.trigger('phoenix.submit', e.currentTarget);\n        });\n      }\n\n      this.form.on('phoenix.submit', (e, button) => {\n        const $button = $(button);\n        const action = $button.attr('data-action');\n        const target = $button.attr('data-target') || null;\n        const query = $button.data('query') || {};\n        query['task'] = $button.attr('data-task') || null;\n\n        this[action](target, query);\n      });\n    }\n\n    /**\n     * Make a request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} method\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    submit(url, queries, method, customMethod) {\n      const form = this.form;\n\n      if (customMethod) {\n        let methodInput = form.find('input[name=\"_method\"]');\n\n        if (!methodInput.length) {\n          methodInput = $('<input name=\"_method\" type=\"hidden\">');\n\n          form.append(methodInput);\n        }\n\n        methodInput.val(customMethod);\n      }\n\n      // Set queries into form.\n      if (queries) {\n        let input;\n\n        const flatted = this.constructor.flattenObject(queries);\n\n        $.each(flatted, (key, value) => {\n          const fieldName = this.constructor.buildFieldName(key);\n          input = form.find('input[name=\"' + fieldName + '\"]');\n\n          if (!input.length) {\n            input = $('<input name=\"' + fieldName + '\" type=\"hidden\">');\n\n            form.append(input);\n          }\n\n          input.val(value);\n        });\n      }\n\n      if (url) {\n        form.attr('action', url);\n      }\n\n      if (method) {\n        form.attr('method', method);\n      }\n\n      form.submit();\n\n      return true;\n    }\n\n    /**\n     * Make a GET request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    get(url, queries, customMethod) {\n      return this.submit(url, queries, 'GET', customMethod);\n    }\n\n    /**\n     * Post form.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    post(url, queries, customMethod) {\n      customMethod = customMethod || 'POST';\n\n      return this.submit(url, queries, 'POST', customMethod);\n    }\n\n    /**\n     * Make a PUT request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    put(url, queries) {\n      return this.post(url, queries, 'PUT');\n    }\n\n    /**\n     * Make a PATCH request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    patch(url, queries) {\n      return this.post(url, queries, 'PATCH');\n    }\n\n    /**\n     * Make a DELETE request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    sendDelete(url, queries) {\n      return this['delete'](url, queries);\n    }\n\n    /**\n     * Make a DELETE request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    delete(url, queries) {\n      return this.post(url, queries, 'DELETE');\n    }\n\n    /**\n     * @see https://stackoverflow.com/a/53739792\n     *\n     * @param {Object} ob\n     * @returns {Object}\n     */\n    static flattenObject(ob) {\n      const toReturn = {};\n\n      for (let i in ob) {\n        if (!ob.hasOwnProperty(i)) {\n          continue;\n        }\n\n        if ((typeof ob[i]) === 'object' && ob[i] != null) {\n          const flatObject = this.flattenObject(ob[i]);\n\n          for (let x in flatObject) {\n            if (!flatObject.hasOwnProperty(x)) {\n              continue;\n            }\n\n            toReturn[i + '/' + x] = flatObject[x];\n          }\n        } else {\n          toReturn[i] = ob[i];\n        }\n      }\n      return toReturn;\n    }\n\n    static buildFieldName(field) {\n      const names = field.split('/');\n\n      const first = names.shift();\n\n      return first + names.map(name => `[${name}]`).join('');\n    }\n  }\n\n  window.PhoenixForm = PhoenixForm;\n})(jQuery);\n"],"file":"form.js"}