{"version":3,"sources":["button-radio.js"],"names":["$","plugin","defaultOptions","selector","buttonClass","activeClass","color","green","red","blue","ButtonRadio","element","options","extend","colors","$radios","find","addClass","on","$btn","e","currentTarget","$group","parent","$input","prop","default","removeClass","data","trigger","each","$radio","$label","$text","text","hide","prepend","val","attr","push","unique","fn","jQuery"],"mappings":"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","file":"button-radio.js","sourcesContent":["/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n(($) => {\r\n  \"use strict\";\r\n\r\n  const plugin = 'buttonRadio';\r\n\r\n  const defaultOptions = {\r\n    selector: '.btn-group .radio',\r\n    buttonClass: 'btn',\r\n    activeClass: 'active',\r\n    color: {\r\n      'default': 'btn-default btn-outline-secondary',\r\n      green: 'btn-success',\r\n      red: 'btn-danger',\r\n      blue: 'btn-primary'\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Button Radio\r\n   *\r\n   * @param {HTMLElement} element\r\n   * @param {Object}      options\r\n   *\r\n   * @constructor\r\n   */\r\n  class ButtonRadio {\r\n    constructor(element, options) {\r\n      this.element = $(element);\r\n      this.options = $.extend(true, {}, defaultOptions, options);\r\n      let colors = [];\r\n\r\n      // Turn radios into btn-group\r\n      const $radios = this.element.find(this.options.selector);\r\n\r\n      options = this.options;\r\n\r\n      $radios.addClass(options.buttonClass)\r\n        .addClass(options.color['default']);\r\n\r\n      $radios.on('click', e => {\r\n        const $btn = $(e.currentTarget);\r\n        const $group = $btn.parent().find('.' + options.buttonClass);\r\n        const $input = $btn.find('input[type=radio]');\r\n\r\n        if ($input.prop('disabled') || $input.prop('readonly')) {\r\n          return;\r\n        }\r\n\r\n        if (!$input.prop('checked')) {\r\n          $group\r\n            .addClass(options.color.default)\r\n            .removeClass(options.activeClass)\r\n            .removeClass(colors);\r\n\r\n          $btn.addClass(options.activeClass).addClass($input.data('color-class')).removeClass(options.color.default);\r\n\r\n          $input.prop('checked', true);\r\n          $input.trigger('change');\r\n        }\r\n      });\r\n\r\n      $radios.each(function () {\r\n        const $radio = $(this);\r\n        const $input = $radio.find('input');\r\n        const $label = $radio.find('label');\r\n        const $text = $('<span>' + $label.text() + '</span>');\r\n\r\n        $label.hide();\r\n        $input.hide();\r\n        $radio.prepend($text);\r\n        $radio.removeClass('radio');\r\n\r\n        // Prepare color schema\r\n        let color = $input.data('color-class');\r\n\r\n        if (color == null) {\r\n          switch ($input.val()) {\r\n            case '':\r\n              color = options.color.blue;\r\n              break;\r\n\r\n            case '0':\r\n              color = options.color.red;\r\n              break;\r\n\r\n            default:\r\n              color = options.color.green;\r\n              break;\r\n          }\r\n\r\n          $input.attr('data-color-class', color);\r\n        }\r\n\r\n        colors.push(color);\r\n\r\n        if ($input.prop('checked')) {\r\n          $radio.removeClass(options.color.default).addClass(options.activeClass).addClass(color);\r\n        }\r\n\r\n        if ($input.prop('disabled')) {\r\n          $radio.addClass('disabled');\r\n        }\r\n\r\n        if ($input.prop('readonly')) {\r\n          $radio.addClass('readonly');\r\n        }\r\n      });\r\n\r\n      $radios.parent().trigger('button-radio.loaded');\r\n\r\n      // Make color elements unique\r\n      colors = $.unique(colors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Push to plugins.\r\n   *\r\n   * @param   {Object} options\r\n   *\r\n   * @returns {ButtonRadio}\r\n   */\r\n  $.fn[plugin] = function (options) {\r\n    if (!this.data('phoenix.' + plugin)) {\r\n      this.data('phoenix.' + plugin, new ButtonRadio(this, options));\r\n    }\r\n\r\n    return this.data('phoenix.' + plugin);\r\n  };\r\n})(jQuery);\r\n"]}