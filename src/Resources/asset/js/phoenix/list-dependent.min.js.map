{"version":3,"sources":["list-dependent.min.js"],"names":["$","plugin","nope","value","ele","dep","defaultOptions","ajax","url","value_field","source","text_field","first_option","default_value","initial_load","empty_mark","hooks","before_request","after_request","ListDependent","$element","dependent","options","this","element","extend","bindEvents","changeList","val","prototype","self","on","event","$this","initial","ajaxUpdate","sourceUpdate","beforeHook","updateListElements","parseInt","console","log","afterHook","uri","SimpleURI","setVar","get","toString","done","response","success","data","error","message","fail","always","items","textField","valueField","empty","unshift","each","option","attr","attributes","index","append","trigger","call","fn","jQuery"],"mappings":"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","file":"list-dependent.min.js","sourcesContent":["/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2017 {ORGANIZATION}. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n;(function($) {\n  \"use strict\";\n\n  var plugin = 'listDependent';\n\n  var nope = function(value, ele, dep) {\n  };\n\n  var defaultOptions = {\n    ajax: {\n      url: null,\n      value_field: 'value'\n    },\n    source: null,\n    text_field: 'title',\n    value_field: 'id',\n    first_option: null,\n    default_value: null,\n    initial_load: true,\n    empty_mark: '__EMPTY__',\n    hooks: {\n      before_request: nope,\n      after_request: nope\n    }\n  };\n\n  /**\n   * Class init.\n   * @param {jQuery}        $element\n   * @param {jQuery|string} dependent\n   * @param {Object}        options\n   * @constructor\n   */\n  var ListDependent = function($element, dependent, options) {\n    this.element = $element;\n    this.options = $.extend(true, {}, defaultOptions, options);\n    this.dependent = $(dependent);\n\n    this.bindEvents();\n\n    if (this.options.initial_load) {\n      this.changeList(this.dependent.val(), true);\n    }\n  };\n\n  ListDependent.prototype = {\n\n    /**\n     * Bind events.\n     */\n    bindEvents: function() {\n      var self = this;\n\n      this.dependent.on('change', function(event) {\n        var $this = $(this);\n        self.changeList($this.val());\n      });\n    },\n\n    /**\n     * Update the list elements.\n     *\n     * @param {*}    value\n     * @param {bool} initial\n     */\n    changeList: function(value, initial) {\n      value = value || this.dependent.val();\n\n      // Empty mark\n      if (value === '') {\n        value = this.options.empty_mark;\n      }\n\n      if (this.options.ajax.url) {\n        this.ajaxUpdate(value);\n      } else if (this.options.source) {\n        this.sourceUpdate(value, initial);\n      }\n    },\n\n    /**\n     * Update list by source.\n     *\n     * @param {string} value\n     * @param {bool}   initial\n     */\n    sourceUpdate: function(value, initial) {\n      var self = this;\n      var source = this.options.source;\n\n      this.beforeHook(value, self.element, self.dependent);\n\n      if (source[value]) {\n        this.updateListElements(source[value]);\n      } else {\n        this.updateListElements([]);\n\n        if (!initial && value !== '' && parseInt(value) !== 0) {\n          console.log('List for value: ' + value + ' not found.');\n        }\n      }\n\n      this.afterHook(value, self.element, self.dependent);\n    },\n\n    /**\n     * Do ajax.\n     *\n     * @param {string} value\n     */\n    ajaxUpdate: function(value) {\n      var self = this;\n      var uri = new SimpleURI(this.options.ajax.url);\n      uri.setVar(this.options.ajax.value_field, value);\n\n      self.beforeHook(value, self.element, self.dependent);\n\n      $.get(uri.toString())\n        .done(function(response) {\n          if (response.success) {\n            self.updateListElements(response.data);\n          } else {\n            console.error(response.message);\n          }\n        }).fail(function(response) {\n        console.error(response.message);\n      }).always(function() {\n        self.afterHook(value, self.element, self.dependent);\n      });\n    },\n\n    /**\n     * Update list elements.\n     *\n     * @param {Array} items\n     */\n    updateListElements: function(items) {\n      var self = this;\n      var textField = this.options.text_field;\n      var valueField = this.options.value_field;\n      self.element.empty();\n\n      if (this.options.first_option) {\n        items.unshift({});\n        items[0][textField] = this.options.first_option[textField];\n        items[0][valueField] = this.options.first_option[valueField];\n      }\n\n      $.each(items, function() {\n        var value = this[valueField];\n        var option = $('<option>' + this[textField] + '</option>');\n        option.attr('value', value);\n\n        if (this.attributes) {\n          $.each(this.attributes, function(index) {\n            option.attr(index, this);\n          });\n        }\n\n        if (self.options.default_value == value) {\n          option.attr('selected', 'selected');\n        }\n\n        self.element.append(option);\n      });\n\n      self.element.trigger('chosen:updated');\n      self.element.trigger('change');\n    },\n\n    /**\n     * Before hook.\n     *\n     * @param {string} value\n     * @param {jQuery} element\n     * @param {jQuery} dependent\n     * @returns {*}\n     */\n    beforeHook: function(value, element, dependent) {\n      var before = this.options.hooks.before_request;\n\n      return before.call(this, value, element, dependent);\n    },\n\n    /**\n     * After hook.\n     *\n     * @param {string} value\n     * @param {jQuery} element\n     * @param {jQuery} dependent\n     * @returns {*}\n     */\n    afterHook: function(value, element, dependent) {\n      var after = this.options.hooks.after_request;\n\n      return after.call(this, value, element, dependent);\n    }\n  };\n\n  /**\n   * Push plugins.\n   *\n   * @param {jQuery} dependent\n   * @param {Object} options\n   *\n   * @returns {*}\n   */\n  $.fn[plugin] = function(dependent, options) {\n    if (!$.data(this, \"phoenix.\" + plugin)) {\n      $.data(this, \"phoenix.\" + plugin, new ListDependent(this, dependent, options));\n    }\n\n    return $.data(this, \"phoenix.\" + plugin);\n  };\n})(jQuery);\n"]}