{"version":3,"sources":["phoenix.min.js"],"names":["$","plugin","defaultOptions","selector","message","PhoenixCore","$form","options","extend","this","form","prototype","submit","url","queries","method","customMethod","input","methodInput","find","length","append","val","each","key","value","attr","get","post","put","patch","sendDelete","delete","confirm","callback","confirmed","addMessage","msg","type","messageContainer","Phoenix","Theme","renderMessage","removeMessages","keepAlive","time","window","setInterval","r","XMLHttpRequest","ActiveXObject","e","open","send","fn","data","jQuery"],"mappings":"CAUA,SAAUA,GACR,aAOA,IAAIC,EAAS,UAETC,GACFC,UACEC,QAAS,kBAYTC,EAAc,SAASC,EAAOC,GAChCA,EAAUP,EAAEQ,QAAO,KAAUN,EAAgBK,GAE7CE,KAAKC,KAAOJ,EACZG,KAAKF,QAAUA,GAGjBF,EAAYM,WAYVC,OAAQ,SAASC,EAAKC,EAASC,EAAQC,GACrC,IAgBMC,EAhBFP,EAAOD,KAAKC,KAEhB,GAAIM,EAAc,CAChB,IAAIE,EAAcR,EAAKS,KAAK,yBAEvBD,EAAYE,SACfF,EAAclB,EAAE,wCAEhBU,EAAKW,OAAOH,IAGdA,EAAYI,IAAIN,GAIdF,GAGFd,EAAEuB,KAAKT,EAAS,SAASU,EAAKC,IAC5BR,EAAQP,EAAKS,KAAK,eAAiBK,EAAM,OAE9BJ,SACTH,EAAQjB,EAAE,gBAAkBwB,EAAM,oBAElCd,EAAKW,OAAOJ,IAGdA,EAAMK,IAAIG,KAcd,OAVIZ,GACFH,EAAKgB,KAAK,SAAUb,GAGlBE,GACFL,EAAKgB,KAAK,SAAUX,GAGtBL,EAAKE,UAEE,GAYTe,IAAK,SAASd,EAAKC,EAASE,GAC1B,OAAOP,KAAKG,OAAOC,EAAKC,EAAS,MAAOE,IAY1CY,KAAM,SAASf,EAAKC,EAASE,GAG3B,OAFAA,EAAeA,GAAgB,OAExBP,KAAKG,OAAOC,EAAKC,EAAS,OAAQE,IAW3Ca,IAAK,SAAShB,EAAKC,GACjB,OAAOL,KAAKmB,KAAKf,EAAKC,EAAS,QAWjCgB,MAAO,SAASjB,EAAKC,GACnB,OAAOL,KAAKmB,KAAKf,EAAKC,EAAS,UAWjCiB,WAAY,SAASlB,EAAKC,GACxB,OAAOL,KAAa,OAAEI,EAAKC,IAW7BkB,OAAU,SAASnB,EAAKC,GACtB,OAAOL,KAAKmB,KAAKf,EAAKC,EAAS,WASjCmB,QAAS,SAAS7B,EAAS8B,GACzB9B,EAAUA,GAAW,gBAErB,IAAI+B,EAAYF,QAAQ7B,GAIxB,OAFA8B,EAASC,GAEFA,GAWTC,WAAY,SAASC,EAAKC,GACxB,IAAIC,EAAmBvC,EAAES,KAAKF,QAAQJ,SAASC,SAI/C,OAFAoC,QAAQC,MAAMC,cAAcH,EAAkBF,EAAKC,GAE5C7B,MAQTkC,eAAgB,WACd,IAAIJ,EAAmBvC,EAAES,KAAKF,QAAQJ,SAASC,SAI/C,OAFAoC,QAAQC,MAAME,eAAeJ,GAEtB9B,MASTmC,UAAW,SAAS/B,EAAKgC,GACvBC,OAAOC,YAAY,WACjB,IAAIC,EAEJ,IACEA,EAAIF,OAAOG,eAAiB,IAAIA,eAAiB,IAAIC,cAAc,qBAErE,MAAOC,IAGHH,IACFA,EAAEI,KAAK,MAAOvC,GAAK,GACnBmC,EAAEK,KAAK,QAERR,KAUP7C,EAAEsD,GAAGrD,GAAU,SAASM,GAKtB,OAJKE,KAAK8C,KAAK,WAAatD,IAC1BQ,KAAK8C,KAAK,WAAatD,EAAQ,IAAII,EAAYI,KAAMF,IAGhDE,KAAK8C,KAAK,WAAatD,IApPlC,CAuPGuD","file":"phoenix.min.js","sourcesContent":["/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later;\n */\n\n/**\n * PhoenixCore\n */\n(function($) {\n  \"use strict\";\n\n  /**\n   * Plugin name.\n   *\n   * @type {string}\n   */\n  var plugin = 'phoenix';\n\n  var defaultOptions = {\n    selector: {\n      message: '.message-wrap'\n    }\n  };\n\n  /**\n   * Class init.\n   *\n   * @param {Element} $form\n   * @param {Object}  options\n   *\n   * @constructor\n   */\n  var PhoenixCore = function($form, options) {\n    options = $.extend(true, {}, defaultOptions, options);\n\n    this.form = $form;\n    this.options = options;\n  };\n\n  PhoenixCore.prototype = {\n\n    /**\n     * Make a request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} method\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    submit: function(url, queries, method, customMethod) {\n      var form = this.form;\n\n      if (customMethod) {\n        var methodInput = form.find('input[name=\"_method\"]');\n\n        if (!methodInput.length) {\n          methodInput = $('<input name=\"_method\" type=\"hidden\">');\n\n          form.append(methodInput);\n        }\n\n        methodInput.val(customMethod);\n      }\n\n      // Set queries into form.\n      if (queries) {\n        var input;\n\n        $.each(queries, function(key, value) {\n          input = form.find('input[name=\"' + key + '\"]');\n\n          if (!input.length) {\n            input = $('<input name=\"' + key + '\" type=\"hidden\">');\n\n            form.append(input);\n          }\n\n          input.val(value);\n        });\n      }\n\n      if (url) {\n        form.attr('action', url);\n      }\n\n      if (method) {\n        form.attr('method', method);\n      }\n\n      form.submit();\n\n      return true;\n    },\n\n    /**\n     * Make a GET request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    get: function(url, queries, customMethod) {\n      return this.submit(url, queries, 'GET', customMethod);\n    },\n\n    /**\n     * Post form.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    post: function(url, queries, customMethod) {\n      customMethod = customMethod || 'POST';\n\n      return this.submit(url, queries, 'POST', customMethod);\n    },\n\n    /**\n     * Make a PUT request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    put: function(url, queries) {\n      return this.post(url, queries, 'PUT');\n    },\n\n    /**\n     * Make a PATCH request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    patch: function(url, queries) {\n      return this.post(url, queries, 'PATCH');\n    },\n\n    /**\n     * Make a DELETE request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    sendDelete: function(url, queries) {\n      return this['delete'](url, queries);\n    },\n\n    /**\n     * Make a DELETE request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    'delete': function(url, queries) {\n      return this.post(url, queries, 'DELETE');\n    },\n\n    /**\n     * Confirm popup.\n     *\n     * @param {string}   message\n     * @param {Function} callback\n     */\n    confirm: function(message, callback) {\n      message = message || 'Are you sure?';\n\n      var confirmed = confirm(message);\n\n      callback(confirmed);\n\n      return confirmed;\n    },\n\n    /**\n     * Add message.\n     *\n     * @param {string} msg\n     * @param {string} type\n     *\n     * @returns {PhoenixCore}\n     */\n    addMessage: function(msg, type) {\n      var messageContainer = $(this.options.selector.message);\n\n      Phoenix.Theme.renderMessage(messageContainer, msg, type);\n\n      return this;\n    },\n\n    /**\n     * Remove all messages.\n     *\n     * @returns {PhoenixCore}\n     */\n    removeMessages: function() {\n      var messageContainer = $(this.options.selector.message);\n\n      Phoenix.Theme.removeMessages(messageContainer);\n\n      return this;\n    },\n\n    /**\n     * Keep alive.\n     *\n     * @param {string} url\n     * @param {Number} time\n     */\n    keepAlive: function(url, time) {\n      window.setInterval(function() {\n        var r;\n\n        try {\n          r = window.XMLHttpRequest ? new XMLHttpRequest : new ActiveXObject('Microsoft.XMLHTTP');\n        }\n        catch (e) {\n        }\n\n        if (r) {\n          r.open('GET', url, true);\n          r.send(null);\n        }\n      }, time);\n    }\n  };\n\n  /**\n   * Push to plugin.\n   *\n   * @param {Object} options\n   * @returns {PhoenixCore}\n   */\n  $.fn[plugin] = function(options) {\n    if (!this.data('phoenix.' + plugin)) {\n      this.data('phoenix.' + plugin, new PhoenixCore(this, options));\n    }\n\n    return this.data('phoenix.' + plugin);\n  };\n\n})(jQuery);\n"]}