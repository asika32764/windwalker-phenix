{"version":3,"sources":["form.js"],"names":["$","PhoenixForm","form","PhoenixFormElement","PhoenixJQueryPlugin","$form","options","phoenix","length","mainSelector","indexOf","attr","substr","data","css","$csrf","append","extend","constructor","defaultOptions","bindEvents","find","on","e","trigger","currentTarget","button","$button","action","target","query","url","queries","method","customMethod","methodInput","val","input","each","key","value","submit","post","window","jQuery"],"mappings":"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","sourcesContent":["/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\n($ => {\n  class PhoenixForm extends PhoenixJQueryPlugin {\n    static get is() { return 'Form'; }\n\n    static get proxies() {\n      return {\n        form: 'createPlugin'\n      };\n    }\n\n    /**\n     * Plugin name.\n     * @returns {string}\n     */\n    static get pluginName() { return 'form' }\n\n    static get pluginClass() { return PhoenixFormElement }\n\n    /**\n     * Default options.\n     * @returns {Object}\n     */\n    static get defaultOptions() { return {} }\n  }\n\n  class PhoenixFormElement {\n    /**\n     * Constructor.\n     * @param {jQuery}      $form\n     * @param {Object}      options\n     * @param {PhoenixCore} phoenix\n     */\n    constructor($form, options, phoenix) {\n      // If form not found, create one\n      if ($form.length === 0) {\n        $form = $('<form>');\n\n        if (options.mainSelector.indexOf('#') === 0) {\n          $form.attr('id', options.mainSelector.substr(1));\n          $form.attr('name', options.mainSelector.substr(1));\n        }\n\n        $form.attr('action', 'post');\n        $form.attr('enctype', 'multipart/form-data');\n        $form.attr('novalidate', 'true');\n        $form.attr('action', phoenix.data('phoenix.uri')['full']);\n        $form.css('display', 'none');\n\n        const $csrf = $('<input type=\"hidden\" value=\"\" name=\"\">');\n        $csrf.attr('name', phoenix.data('csrfToken'));\n\n        $form.append($csrf);\n\n        $('body').append($form);\n      }\n      \n      options = $.extend(true, {}, this.constructor.defaultOptions, options);\n\n      this.form = $form;\n      this.options = options;\n\n      this.bindEvents();\n    }\n\n    bindEvents() {\n      if (this.form.attr('data-toolbar')) {\n        $(this.form.attr('data-toolbar')).find('*[data-action]').on('click', (e) => {\n          this.form.trigger('phoenix.submit', e.currentTarget);\n        });\n      }\n\n      this.form.on('phoenix.submit', (e, button) => {\n        const $button = $(button);\n        const action = $button.attr('data-action');\n        const target = $button.attr('data-target') || null;\n        const query = $button.data('query') || {};\n        query['task'] = $button.attr('data-task') || null;\n\n        this[action](target, query);\n      });\n    }\n\n    /**\n     * Make a request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} method\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    submit(url, queries, method, customMethod) {\n      const form = this.form;\n\n      if (customMethod) {\n        let methodInput = form.find('input[name=\"_method\"]');\n\n        if (!methodInput.length) {\n          methodInput = $('<input name=\"_method\" type=\"hidden\">');\n\n          form.append(methodInput);\n        }\n\n        methodInput.val(customMethod);\n      }\n\n      // Set queries into form.\n      if (queries) {\n        let input;\n\n        $.each(queries, function(key, value) {\n          input = form.find('input[name=\"' + key + '\"]');\n\n          if (!input.length) {\n            input = $('<input name=\"' + key + '\" type=\"hidden\">');\n\n            form.append(input);\n          }\n\n          input.val(value);\n        });\n      }\n\n      if (url) {\n        form.attr('action', url);\n      }\n\n      if (method) {\n        form.attr('method', method);\n      }\n\n      form.submit();\n\n      return true;\n    }\n\n    /**\n     * Make a GET request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    get(url, queries, customMethod) {\n      return this.submit(url, queries, 'GET', customMethod);\n    }\n\n    /**\n     * Post form.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     * @param  {string} customMethod\n     *\n     * @returns {boolean}\n     */\n    post(url, queries, customMethod) {\n      customMethod = customMethod || 'POST';\n\n      return this.submit(url, queries, 'POST', customMethod);\n    }\n\n    /**\n     * Make a PUT request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    put(url, queries) {\n      return this.post(url, queries, 'PUT');\n    }\n\n    /**\n     * Make a PATCH request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    patch(url, queries) {\n      return this.post(url, queries, 'PATCH');\n    }\n\n    /**\n     * Make a DELETE request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    sendDelete(url, queries) {\n      return this['delete'](url, queries);\n    }\n\n    /**\n     * Make a DELETE request.\n     *\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    delete(url, queries) {\n      return this.post(url, queries, 'DELETE');\n    }\n  }\n\n  window.PhoenixForm = PhoenixForm;\n})(jQuery);\n"],"file":"form.js"}