{"version":3,"sources":["grid.min.js"],"names":["$","plugin","defaultOptions","selector","search","container","button","clearButton","filter","sort","PhoenixGrid","element","core","options","this","form","extend","searchContainer","find","searchButton","searchClearButton","filterContainer","filterButton","sortButtons","registerEvents","prototype","self","click","event","val","submit","toggleFilter","stopPropagation","preventDefault","Phoenix","Theme","ordering","direction","orderingInput","length","append","directionInput","put","checkRow","row","value","ch","Error","checked","updateRow","url","queries","toggleAll","patch","doTask","task","batch","copyRow","post","deleteList","message","Translator","translate","confirm","isConfirm","deleteRow","msg","duration","checkboxes","each","i","e","setTimeout","countChecked","getChecked","result","push","hasChecked","alert","reorderAll","origin","originOrdering","split","inputs","$this","data","tr","parents","group","siblings","prop","reorder","delta","fn","jQuery"],"mappings":"CAUC,SAAUA,GACT,aAOA,IAAIC,EAAS,OAOTC,GACFC,UACEC,QACEC,UAAW,oBACXC,OAAQ,iBACRC,YAAa,wBAEfC,QACEH,UAAW,oBACXC,OAAQ,yBAEVG,MACEH,OAAQ,yBAcd,SAASI,EAAYC,EAASC,EAAMC,GAClCC,KAAKC,KAAOJ,EACZG,KAAKF,KAAOA,EACZE,KAAKD,QAAUb,EAAEgB,QAAO,KAAUd,EAAgBW,GAElD,IAAIV,EAAWW,KAAKD,QAAQV,SAE5BW,KAAKG,gBAAkBH,KAAKC,KAAKG,KAAKf,EAASC,OAAOC,WACtDS,KAAKK,aAAeL,KAAKC,KAAKG,KAAKf,EAASC,OAAOE,QACnDQ,KAAKM,kBAAoBN,KAAKC,KAAKG,KAAKf,EAASC,OAAOG,aACxDO,KAAKO,gBAAkBP,KAAKC,KAAKG,KAAKf,EAASK,OAAOH,WACtDS,KAAKQ,aAAeR,KAAKC,KAAKG,KAAKf,EAASK,OAAOF,QACnDQ,KAAKS,YAAcT,KAAKC,KAAKG,KAAKf,EAASM,KAAKH,QAEhDQ,KAAKU,iBAGPd,EAAYe,WAKVD,eAAgB,WACd,IAAIE,EAAOZ,KAEXA,KAAKM,kBAAkBO,MAAM,SAASC,GACpCF,EAAKT,gBAAgBC,KAAK,2BAA2BW,IAAI,IACzDH,EAAKL,gBAAgBH,KAAK,2BAA2BW,IAAI,IAEzDH,EAAKX,KAAKe,WAGZhB,KAAKQ,aAAaK,MAAM,SAASC,GAC/BF,EAAKK,eACLH,EAAMI,kBACNJ,EAAMK,mBAGRnB,KAAKS,YAAYI,MAAM,SAASC,GAC9BF,EAAKjB,KAAKK,KAAMc,MASpBG,aAAc,WAGZ,OAFAG,QAAQC,MAAMJ,aAAajB,KAAKO,gBAAiBP,KAAKQ,cAE/CR,MAWTL,KAAM,SAAS2B,EAAUC,GACvB,IAAIC,EAAgBxB,KAAKC,KAAKG,KAAK,6BAE9BoB,EAAcC,SACjBD,EAAgBtC,EAAE,yDAElBc,KAAKC,KAAKyB,OAAOF,IAGnB,IAAIG,EAAiB3B,KAAKC,KAAKG,KAAK,8BAWpC,OATKuB,EAAeF,SAClBE,EAAiBzC,EAAE,0DAEnBc,KAAKC,KAAKyB,OAAOC,IAGnBH,EAAcT,IAAIO,GAClBK,EAAeZ,IAAIQ,GAEZvB,KAAKF,KAAK8B,OASnBC,SAAU,SAASC,EAAKC,GACtBA,EAAQA,IAAS,EAEjB,IAAIC,EAAKhC,KAAKC,KAAKG,KAAK,uCAAyC0B,EAAM,KAEvE,IAAKE,EAAGP,OACN,MAAM,IAAIQ,MAAM,oBAAsBH,EAAM,eAG9CE,EAAG,GAAGE,QAAUH,GAYlBI,UAAW,SAASL,EAAKM,EAAKC,GAK5B,OAJArC,KAAKsC,WAAU,GAEftC,KAAK6B,SAASC,GAEP9B,KAAKF,KAAKyC,MAAMH,EAAKC,IAa9BG,OAAQ,SAASC,EAAMX,EAAKM,EAAKC,GAK/B,OAJAA,EAAUA,OAEFI,KAAOA,EAERzC,KAAKmC,UAAUL,EAAKM,EAAKC,IAYlCK,MAAO,SAASD,EAAML,EAAKC,GAKzB,OAJAA,EAAUA,OAEFI,KAAOA,EAERzC,KAAKF,KAAKyC,MAAMH,EAAKC,IAY9BM,QAAS,SAASb,EAAKM,EAAKC,GAK1B,OAJArC,KAAKsC,WAAU,GAEftC,KAAK6B,SAASC,GAEP9B,KAAKF,KAAK8C,KAAKR,EAAKC,IAY7BQ,WAAY,SAASC,EAASV,EAAKC,GACjC,IAAIzB,EAAOZ,KAUX,OARA8C,EAAUA,GAAW1B,QAAQ2B,WAAWC,UAAU,kCAElDhD,KAAKF,KAAKmD,QAAQH,EAAS,SAASI,GAC9BA,GACFtC,EAAKd,KAAa,OAAEsC,EAAKC,MAItB,GAaTc,UAAW,SAASrB,EAAKsB,EAAKhB,EAAKC,GAKjC,OAJArC,KAAKsC,WAAU,GAEftC,KAAK6B,SAASC,GAEP9B,KAAK6C,WAAWO,EAAKhB,EAAKC,IASnCC,UAAW,SAASP,EAAOsB,GACzB,IAAIC,EAAatD,KAAKC,KAAKG,KAAK,sCAchC,OAZAlB,EAAEqE,KAAKD,EAAY,SAASE,EAAGC,GACzBJ,EAEFK,WAAW,WACTD,EAAEvB,QAAUH,GACVsB,EAAWC,EAAW7B,OAAU+B,GAGpCC,EAAEvB,QAAUH,IAIT/B,MAQT2D,aAAc,WACZ,OAAO3D,KAAK4D,aAAanC,QAQ3BmC,WAAY,WACV,IAAIN,EAAatD,KAAKC,KAAKG,KAAK,sCAC9ByD,KAQF,OANA3E,EAAEqE,KAAKD,EAAY,SAASE,EAAGC,GACzBA,EAAEvB,SACJ2B,EAAOC,KAAKL,KAITI,GAWTE,WAAY,SAASX,EAAKtC,GAGxB,GAFAsC,EAAMA,GAAOhC,QAAQ2B,WAAWC,UAAU,iCAErChD,KAAK2D,eASR,MARAK,MAAMZ,GAGFtC,IACFA,EAAMI,kBACNJ,EAAMK,kBAGF,IAAIc,MAAMmB,GAGlB,OAAOpD,MAWTiE,WAAY,SAAS7B,EAAKC,GACxB,IAAIzB,EAAOZ,KACPkE,EAASlE,KAAKC,KAAKG,KAAK,+BAG5B,GAAI8D,EAAOzC,OAAQ,CACjB,IAAI0C,EAAiBD,EAAOnD,MAAMqD,MAAM,KACpCC,EAASrE,KAAKC,KAAKG,KAAK,2BAE5BJ,KAAKsC,WAAU,GAEf+B,EAAOd,KAAK,SAASC,GACnB,IAAIc,EAAQpF,EAAEc,MAEd,GAAIsE,EAAMvD,QAAUoD,EAAeX,GAAI,CAErC5C,EAAKiB,SAASyC,EAAMC,KAAK,cAEzB,IAAIC,EAAKF,EAAMG,QAAQ,MACnBC,EAAQF,EAAGD,KAAK,eAGN,KAAVG,GACFF,EAAGG,SAAS,qBAAuBD,EAAQ,KACxCtE,KAAK,uBACLwE,KAAK,WAAW,MAM3B,OAAO5E,KAAK0C,MAAM,UAAWN,EAAKC,IAapCwC,QAAS,SAAS/C,EAAKgD,EAAO1C,EAAKC,GAIjC,OAHAA,EAAUA,OACFyC,MAAQA,EAET9E,KAAKwC,OAAO,UAAWV,EAAKM,EAAKC,KAY5CnD,EAAE6F,GAAG5F,GAAU,SAASW,EAAMC,GAK5B,OAJKC,KAAKuE,KAAK,WAAapF,IAC1Ba,KAAKuE,KAAK,WAAapF,EAAQ,IAAIS,EAAYI,KAAMF,EAAMC,IAGtDC,KAAKuE,KAAK,WAAapF,IApZjC,CAuZE6F","file":"grid.min.js","sourcesContent":["/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n/**\n * PhoenixGrid\n */\n;(function($) {\n  \"use strict\";\n\n  /**\n   * Plugin Name.\n   *\n   * @type {string}\n   */\n  var plugin = \"grid\";\n\n  /**\n   * Default options.\n   *\n   * @type {Object}\n   */\n  var defaultOptions = {\n    selector: {\n      search: {\n        container: '.search-container',\n        button: '.search-button',\n        clearButton: '.search-clear-button'\n      },\n      filter: {\n        container: '.filter-container',\n        button: '.filter-toggle-button'\n      },\n      sort: {\n        button: 'a[data-sort-button]'\n      }\n    }\n  };\n\n  /**\n   * PhoenixGrid constructor.\n   *\n   * @param {Element}     element\n   * @param {PhoenixCore} core\n   * @param {Object}      options\n   *\n   * @constructor\n   */\n  function PhoenixGrid(element, core, options) {\n    this.form = element;\n    this.core = core;\n    this.options = $.extend(true, {}, defaultOptions, options);\n\n    var selector = this.options.selector;\n\n    this.searchContainer = this.form.find(selector.search.container);\n    this.searchButton = this.form.find(selector.search.button);\n    this.searchClearButton = this.form.find(selector.search.clearButton);\n    this.filterContainer = this.form.find(selector.filter.container);\n    this.filterButton = this.form.find(selector.filter.button);\n    this.sortButtons = this.form.find(selector.sort.button);\n\n    this.registerEvents();\n  }\n\n  PhoenixGrid.prototype = {\n\n    /**\n     * Start this object and events.\n     */\n    registerEvents: function() {\n      var self = this;\n\n      this.searchClearButton.click(function(event) {\n        self.searchContainer.find('input, textarea, select').val('');\n        self.filterContainer.find('input, textarea, select').val('');\n\n        self.form.submit();\n      });\n\n      this.filterButton.click(function(event) {\n        self.toggleFilter();\n        event.stopPropagation();\n        event.preventDefault();\n      });\n\n      this.sortButtons.click(function(event) {\n        self.sort(this, event);\n      });\n    },\n\n    /**\n     * Toggle filter bar.\n     *\n     * @returns {PhoenixGrid}\n     */\n    toggleFilter: function() {\n      Phoenix.Theme.toggleFilter(this.filterContainer, this.filterButton);\n\n      return this;\n    },\n\n    /**\n     * Sort two items.\n     *\n     * @param {string} ordering\n     * @param {string} direction\n     *\n     * @returns {boolean}\n     */\n    sort: function(ordering, direction) {\n      var orderingInput = this.form.find('input[name=list_ordering]');\n\n      if (!orderingInput.length) {\n        orderingInput = $('<input name=\"list_ordering\" type=\"hidden\" value=\"\" />');\n\n        this.form.append(orderingInput);\n      }\n\n      var directionInput = this.form.find('input[name=list_direction]');\n\n      if (!directionInput.length) {\n        directionInput = $('<input name=\"list_direction\" type=\"hidden\" value=\"\" />');\n\n        this.form.append(directionInput);\n      }\n\n      orderingInput.val(ordering);\n      directionInput.val(direction);\n\n      return this.core.put();\n    },\n\n    /**\n     * Check a row's checkbox.\n     *\n     * @param {number}  row\n     * @param {boolean} value\n     */\n    checkRow: function(row, value) {\n      value = value || true;\n\n      var ch = this.form.find('input.grid-checkbox[data-row-number=' + row + ']');\n\n      if (!ch.length) {\n        throw new Error('Checkbox of row: ' + row + ' not found.');\n      }\n\n      ch[0].checked = value;\n    },\n\n    /**\n     * Update a row.\n     *\n     * @param  {number} row\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    updateRow: function(row, url, queries) {\n      this.toggleAll(false);\n\n      this.checkRow(row);\n\n      return this.core.patch(url, queries);\n    },\n\n    /**\n     * Update a row with batch task.\n     *\n     * @param  {string} task\n     * @param  {number} row\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    doTask: function(task, row, url, queries) {\n      queries = queries || {};\n\n      queries.task = task;\n\n      return this.updateRow(row, url, queries);\n    },\n\n    /**\n     * Batch update items.\n     *\n     * @param  {string} task\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    batch: function(task, url, queries) {\n      queries = queries || {};\n\n      queries.task = task;\n\n      return this.core.patch(url, queries);\n    },\n\n    /**\n     * Copy a row.\n     *\n     * @param  {number} row\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    copyRow: function(row, url, queries) {\n      this.toggleAll(false);\n\n      this.checkRow(row);\n\n      return this.core.post(url, queries);\n    },\n\n    /**\n     * Delete checked items.\n     *\n     * @param  {string} message\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    deleteList: function(message, url, queries) {\n      var self = this;\n\n      message = message || Phoenix.Translator.translate('phoenix.message.delete.confirm');\n\n      this.core.confirm(message, function(isConfirm) {\n        if (isConfirm) {\n          self.core['delete'](url, queries);\n        }\n      });\n\n      return true;\n    },\n\n    /**\n     * Delete an itme.\n     *\n     * @param  {number} row\n     * @param  {string} msg\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    deleteRow: function(row, msg, url, queries) {\n      this.toggleAll(false);\n\n      this.checkRow(row);\n\n      return this.deleteList(msg, url, queries);\n    },\n\n    /**\n     * Toggle all checkboxes.\n     *\n     * @param  {boolean}          value     Checked or unchecked.\n     * @param  {number|boolean}   duration  Duration to check all.\n     */\n    toggleAll: function(value, duration) {\n      var checkboxes = this.form.find('input.grid-checkbox[type=checkbox]');\n\n      $.each(checkboxes, function(i, e) {\n        if (duration) {\n          // A little pretty effect\n          setTimeout(function() {\n            e.checked = value;\n          }, (duration / checkboxes.length) * i);\n        }\n        else {\n          e.checked = value;\n        }\n      });\n\n      return this;\n    },\n\n    /**\n     * Count checked checkboxes.\n     *\n     * @returns {int}\n     */\n    countChecked: function() {\n      return this.getChecked().length;\n    },\n\n    /**\n     * Get Checked boxes.\n     *\n     * @returns {Element[]}\n     */\n    getChecked: function() {\n      var checkboxes = this.form.find('input.grid-checkbox[type=checkbox]'),\n        result = [];\n\n      $.each(checkboxes, function(i, e) {\n        if (e.checked) {\n          result.push(e);\n        }\n      });\n\n      return result;\n    },\n\n    /**\n     * Validate there has one or more checked boxes.\n     *\n     * @param   {string}  msg\n     * @param   {Event}   event\n     *\n     * @returns {PhoenixGrid}\n     */\n    hasChecked: function(msg, event) {\n      msg = msg || Phoenix.Translator.translate('phoenix.message.grid.checked');\n\n      if (!this.countChecked()) {\n        alert(msg);\n\n        // If you send event object as second argument, we will stop all actions.\n        if (event) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n\n        throw new Error(msg);\n      }\n\n      return this;\n    },\n\n    /**\n     * Reorder all.\n     *\n     * @param   {string}  url\n     * @param   {Object}  queries\n     *\n     * @returns {boolean}\n     */\n    reorderAll: function(url, queries) {\n      var self = this;\n      var origin = this.form.find('input[name=origin_ordering]');\n\n      // If origin exists, we diff them and only send changed group.\n      if (origin.length) {\n        var originOrdering = origin.val().split(',');\n        var inputs = this.form.find('.ordering-control input');\n\n        this.toggleAll(false);\n\n        inputs.each(function(i) {\n          var $this = $(this);\n\n          if ($this.val() !== originOrdering[i]) {\n            // Check self\n            self.checkRow($this.data('order-row'));\n\n            var tr = $this.parents('tr');\n            var group = tr.data('order-group');\n\n            // Check same group boxes\n            if (group !== '') {\n              tr.siblings('[data-order-group=' + group + ']')\n                .find('input.grid-checkbox')\n                .prop('checked', true);\n            }\n          }\n        });\n      }\n\n      return this.batch('reorder', url, queries);\n    },\n\n    /**\n     * Reorder items.\n     *\n     * @param  {int}     row\n     * @param  {int}     delta\n     * @param  {string}  url\n     * @param  {Object}  queries\n     *\n     * @returns {boolean}\n     */\n    reorder: function(row, delta, url, queries) {\n      queries = queries || {};\n      queries.delta = delta;\n\n      return this.doTask('reorder', row, url, queries);\n    }\n  };\n\n  /**\n   * Push plugins.\n   *\n   * @param core\n   * @param options\n   *\n   * @returns {*}\n   */\n  $.fn[plugin] = function(core, options) {\n    if (!this.data(\"phoenix.\" + plugin)) {\n      this.data(\"phoenix.\" + plugin, new PhoenixGrid(this, core, options));\n    }\n\n    return this.data(\"phoenix.\" + plugin);\n  };\n\n})(jQuery);\n"]}