{"version":3,"sources":["phoenix.js","plugin.js","helper.js","ui.js","router.js","ajax.js","crypto.js","translator.js","legacy.js"],"names":["PhoenixCore","options","$","extend","constructor","defaultOptions","_listeners","waits","wait","resolve","completed","then","trigger","plugin","Array","isArray","forEach","use","p","is","undefined","Error","name","PhoenixPlugin","instance","install","boot","uninstall","event","handler","on","e","push","once","_once","callback","listeners","filter","listener","args","data","console","debug","value","document","removeData","type","uri","d","Deferred","promise","when","self","fn","ele","window","jQuery","phoenix","toLowerCase","createProxies","resetProxies","created","ready","loaded","proxies","hasOwnProperty","origin","Object","defineProperties","get","set","PhoenixJQueryPlugin","selector","mainSelector","pluginName","pluginClass","PhoenixHelper","isDebug","confirm","keepAlive","stopKeepAlive","loadScript","numberFormat","sprintf","vsprintf","aliveHandle","message","falseCallback","done","catch","confirmed","reject","urls","autoConvert","promises","endsWith","str","suffix","indexOf","length","asset","ext","url","split","pop","loadUri","assetFile","assetMinFile","slice","getScript","addUriBase","cache","substr","time","setInterval","clearInterval","number","decimals","decPoint","thousandsSep","parseFloat","roundedNumber","Math","round","abs","numbersString","decimalsString","formattedNumber","re","not_string","not_bool","not_type","not_primitive","numeric_arg","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf_format","sprintf_parse","arguments","fmt","argv","apply","concat","parse_tree","cursor","tree_length","arg","output","i","k","match","pad","pad_character","pad_length","is_positive","test","Function","isNaN","TypeError","parseInt","toString","String","fromCharCode","JSON","stringify","toExponential","toFixed","Number","toPrecision","substring","prototype","call","valueOf","toUpperCase","replace","charAt","repeat","sprintf_cache","create","_fmt","arg_names","exec","field_list","replacement_field","field_match","SyntaxError","PhoenixUI","messageSelector","addMessage","messageContainer","showValidateResponse","validation","state","$input","help","removeValidateResponse","$element","$control","icon","msg","children","each","remove","container","button","showClass","attr","hideClass","find","iconShowClass","iconHideClass","hasClass","removeClass","addClass","hide","show","PhoenixRouter","route","query","addQuery","param","history","pushState","title","params","replaceState","back","forward","num","go","addRoute","PhoenixAjax","config","customMethod","headers","GET","POST","PUT","PATCH","DELETE","HEAD","OPTIONS","_global","request","method","_method","ajax","clone","globalSerial","PhoenixCrypto","string","btoa","atob","code","map","c","charCodeAt","keyCharAt","join","base64Encode","base64Decode","floor","b","a","random","prefix","moreEntropy","retId","_formatSeed","seed","reqWidth","$global","global","$locutus","php","uniqidSeed","Date","getTime","encrypt","decrypt","uuid4","md5","uniqid","Crypto","safe_add","x","y","lsw","msw","bit_rol","cnt","md5_cmn","q","s","t","md5_ff","md5_gg","md5_hh","md5_ii","binl_md5","len","olda","oldb","oldc","oldd","binl2rstr","input","rstr2binl","rstr_md5","rstr_hmac_md5","bkey","ipad","opad","hash","rstr2hex","hex_tab","str2rstr_utf8","decodeURIComponent","encodeURIComponent","raw_md5","hex_md5","raw_hmac_md5","hex_hmac_md5","raw","define","amd","module","exports","PhoenixTranslator","trans","__","addLanguage","keys","normalize","langs","formInited","gridInited","PhoenixLegacy","Theme","UI","warn","Grid","obj"],"mappings":"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","file":"phoenix.js","sourcesContent":["/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n($ => {\r\n  class PhoenixCore {\r\n    /**\r\n     * Default options.\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    constructor(options = {}) {\r\n      this.options = $.extend(true, {}, this.constructor.defaultOptions, options);\r\n      this._listeners = {};\r\n      this.waits = [];\r\n\r\n      // Wait dom ready\r\n      this.wait(resolve => {\r\n        $(() => resolve());\r\n      });\r\n\r\n      // Ready\r\n      $(() => {\r\n        this.completed().then(() => this.trigger('loaded'));\r\n      });\r\n    }\r\n\r\n    use(plugin) {\r\n      if (Array.isArray(plugin)) {\r\n        plugin.forEach(p => this.use(p));\r\n        return this;\r\n      }\r\n\r\n      if (plugin.is === undefined) {\r\n        throw new Error(`Plugin: ${plugin.name} must instance of : ${PhoenixPlugin.name}`);\r\n      }\r\n\r\n      const instance = plugin.install(this);\r\n      instance.boot(this);\r\n\r\n      this.trigger('plugin.installed', instance);\r\n\r\n      return this;\r\n    }\r\n\r\n    detach(plugin) {\r\n      if (!plugin instanceof PhoenixPlugin) {\r\n        throw new Error('Plugin must instance of : ' + PhoenixPlugin.name);\r\n      }\r\n\r\n      plugin.uninstall(this);\r\n\r\n      this.trigger('plugin.uninstalled', plugin);\r\n\r\n      return this;\r\n    }\r\n\r\n    on(event, handler) {\r\n      if (Array.isArray(event)) {\r\n        event.forEach(e => this.on(e, handler));\r\n        return this;\r\n      }\r\n\r\n      if (this._listeners[event] === undefined) {\r\n        this._listeners[event] = [];\r\n      }\r\n\r\n      this._listeners[event].push(handler);\r\n\r\n      return this;\r\n    }\r\n\r\n    once(event, handler) {\r\n      if (Array.isArray(event)) {\r\n        event.forEach(e => this.once(e, handler));\r\n        return this;\r\n      }\r\n\r\n      handler._once = true;\r\n\r\n      this.on(event, handler);\r\n    }\r\n\r\n    off(event, callback = null) {\r\n      if (callback !== null) {\r\n        this._listeners[event] = this.listeners(event).filter((listener) => listener !== callback);\r\n        return this;\r\n      }\r\n\r\n      delete this._listeners[event];\r\n\r\n      return this;\r\n    }\r\n\r\n    trigger(event, ...args) {\r\n      if (Array.isArray(event)) {\r\n        event.forEach(e => this.trigger(e));\r\n        return this;\r\n      }\r\n\r\n      this.listeners(event).forEach(listener => {\r\n        listener(...args);\r\n      });\r\n\r\n      // Remove once\r\n      this._listeners[event] = this.listeners(event).filter((listener) => listener._once !== true);\r\n\r\n      if (this.data('windwalker.debug')) {\r\n        console.debug(`[Phoenix Event] ${event}`, args, this.listeners(event));\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    listeners(event) {\r\n      if (typeof event !== 'string') {\r\n        throw new Error(`get listeners event name should only use string.`);\r\n      }\r\n\r\n      return this._listeners[event] === undefined ? [] : this._listeners[event];\r\n    }\r\n\r\n    data(name, value) {\r\n      if (value === undefined) {\r\n        return $(document).data(name);\r\n      }\r\n\r\n      $(document).data(name, value);\r\n\r\n      return this;\r\n    }\r\n\r\n    removeData(name) {\r\n      $(document).removeData(name);\r\n\r\n      return this;\r\n    }\r\n\r\n    uri(type) {\r\n      return this.data('phoenix.uri')[type];\r\n    }\r\n\r\n    asset(type) {\r\n      return this.uri('asset')[type];\r\n    }\r\n\r\n    wait(callback) {\r\n      const d = $.Deferred();\r\n\r\n      this.waits.push(d);\r\n\r\n      callback(() => d.resolve());\r\n\r\n      return d;\r\n    }\r\n\r\n    completed() {\r\n      const promise = $.when(...this.waits);\r\n\r\n      this.waits = [];\r\n\r\n      return promise;\r\n    }\r\n\r\n    plugin(name, plugin) {\r\n      const self = this;\r\n      $.fn[name] = function (...args) {\r\n        if (!this.data('phoenix.' + name)) {\r\n          const instance = new plugin(this, ...args);\r\n          this.data('phoenix.' + name, instance);\r\n          self.trigger('jquery.plugin.created', {name: name, ele: this, instance: instance});\r\n        }\r\n\r\n        const instance = this.data('phoenix.' + name);\r\n\r\n        self.trigger('jquery.plugin.get', {name: name, ele: this, instance: instance});\r\n\r\n        return instance;\r\n      };\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  window.PhoenixCore = PhoenixCore;\r\n})(jQuery);\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n($ => {\r\n  class PhoenixPlugin {\r\n    static get is() {\r\n      throw new Error('Please add \"is\" property to Phoenix Plugin: ' + this.name);\r\n    }\r\n\r\n    static get proxies() {\r\n      return {};\r\n    }\r\n\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    get options() {\r\n      return this.phoenix.options[this.constructor.is.toLowerCase()];\r\n    }\r\n\r\n    static install(phoenix) {\r\n      const self = new this;\r\n\r\n      this.createProxies(phoenix, self);\r\n      return self;\r\n    }\r\n\r\n    static uninstall(phoenix) {\r\n      const self = new this(phoenix);\r\n\r\n      this.resetProxies(phoenix, self);\r\n    }\r\n\r\n    constructor() {\r\n      //\r\n    }\r\n\r\n    boot(phoenix) {\r\n      this.phoenix = phoenix;\r\n\r\n      const name = this.constructor.is.toLowerCase();\r\n\r\n      // Merge to global options\r\n      this.phoenix.options[name] = $.extend(\r\n        true,\r\n        {},\r\n        this.constructor.defaultOptions,\r\n        this.phoenix.options[name]\r\n      );\r\n\r\n      // Created hook\r\n      this.created();\r\n\r\n      // DOM Ready hook\r\n      $(() => this.ready());\r\n\r\n      // Phoenix onload hook\r\n      this.phoenix.on('loaded', this.loaded);\r\n    }\r\n\r\n    created() {\r\n      //\r\n    }\r\n\r\n    ready() {\r\n      //\r\n    }\r\n\r\n    loaded() {\r\n      //\r\n    }\r\n\r\n    static createProxies(phoenix, plugin) {\r\n      if (plugin.constructor.proxies === undefined) {\r\n        return this;\r\n      }\r\n\r\n      this.resetProxies(phoenix, plugin);\r\n\r\n      phoenix[plugin.constructor.is] = plugin;\r\n\r\n      const proxies = plugin.constructor.proxies;\r\n\r\n      for (let name in proxies) {\r\n        if (!proxies.hasOwnProperty(name)) {\r\n          continue;\r\n        }\r\n\r\n        const origin = proxies[name];\r\n\r\n        if (phoenix[name] !== undefined) {\r\n          throw new Error(`Property: ${name} has exists in Phoenix instance.`);\r\n        }\r\n\r\n        if (typeof origin === 'function') {\r\n          phoenix[name] = origin;\r\n        } else if (plugin[origin] !== undefined) {\r\n          if (typeof plugin[origin] === 'function') {\r\n            phoenix[name] = function (...args) {\r\n              return plugin[origin](...args);\r\n            };\r\n          } else {\r\n            Object.defineProperties(phoenix, name, {\r\n              get: () => plugin[origin],\r\n              set: value => {\r\n                plugin[origin] = value;\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          throw new Error(`Proxy property: \"${origin}\" not found in Plugin: ${plugin.constructor.name}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    static resetProxies(phoenix, plugin) {\r\n      const name = typeof plugin === 'string' ? plugin : plugin.constructor.is;\r\n\r\n      if (phoenix[name]) {\r\n        plugin = phoenix[name];\r\n      }\r\n\r\n      if (plugin.constructor.proxies === undefined) {\r\n        return;\r\n      }\r\n\r\n      for (let name in plugin.constructor.proxies) {\r\n        delete phoenix[name];\r\n      }\r\n\r\n      delete phoenix[plugin.constructor.is];\r\n    }\r\n  }\r\n\r\n  class PhoenixJQueryPlugin extends PhoenixPlugin {\r\n    /**\r\n     * Plugin name.\r\n     * @returns {string|null}\r\n     */\r\n    static get pluginName() {\r\n      throw new Error('Please provide a plugin name.');\r\n    }\r\n\r\n    static get pluginClass() {\r\n      throw new Error('Please provide a class as plugin instance.');\r\n    }\r\n\r\n    static install(phoenix) {\r\n      const instance = super.install(phoenix);\r\n\r\n      phoenix.plugin(this.pluginName, this.pluginClass);\r\n\r\n      return instance;\r\n    }\r\n\r\n    createPlugin(selector, options = {}, ...args) {\r\n      options.mainSelector = selector;\r\n\r\n      return $(selector)[this.constructor.pluginName](options, this.phoenix, ...args);\r\n    }\r\n  }\r\n\r\n  window.PhoenixPlugin = PhoenixPlugin;\r\n  window.PhoenixJQueryPlugin = PhoenixJQueryPlugin;\r\n})(jQuery);\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n(($) => {\r\n  class PhoenixHelper extends PhoenixPlugin {\r\n    static get is() { return 'Helper'; }\r\n\r\n    static get proxies() {\r\n      return {\r\n        isDebug: 'isDebug',\r\n        confirm: 'confirm',\r\n        keepAlive: 'keepAlive',\r\n        stopKeepAlive: 'stopKeepAlive',\r\n        loadScript: 'loadScript',\r\n        numberFormat: 'numberFormat',\r\n        sprintf: 'sprintf',\r\n        vsprintf: 'vsprintf',\r\n      };\r\n    }\r\n\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.aliveHandle = null;\r\n    }\r\n\r\n    isDebug() {\r\n      return this.phoenix.data('windwalker.debug');\r\n    }\r\n\r\n    /**\r\n     * Confirm popup.\r\n     *\r\n     * @param {string}   message\r\n     * @param {Function} callback\r\n     * @param {Function} falseCallback\r\n     */\r\n    confirm(message, callback, falseCallback = null) {\r\n      message = message || 'Are you sure?';\r\n\r\n      const d = $.Deferred();\r\n      const when = $.when(d);\r\n\r\n      if (callback) {\r\n        when.done(callback);\r\n      }\r\n\r\n      if (falseCallback) {\r\n        when.catch(callback);\r\n      }\r\n\r\n      const confirmed = confirm(message);\r\n\r\n      if (confirmed) {\r\n        d.resolve(confirmed);\r\n      } else {\r\n        d.reject(confirmed);\r\n      }\r\n\r\n      return when;\r\n    }\r\n\r\n    loadScript(urls, autoConvert = true) {\r\n      if (typeof urls === 'string') {\r\n        urls = [urls];\r\n      }\r\n\r\n      const promises = [];\r\n      const data = {};\r\n      const endsWith = (str, suffix) => str.indexOf(suffix, str.length - suffix.length) >= 0;\r\n      data[this.phoenix.asset('version')] = '1';\r\n\r\n      urls.forEach(url => {\r\n        const ext = url.split('.').pop();\r\n        let loadUri = url;\r\n\r\n        if (autoConvert) {\r\n          let assetFile, assetMinFile;\r\n\r\n          if (endsWith(url, '.min.' + ext)) {\r\n            assetMinFile = url;\r\n            assetFile = url.slice(0, -`.min.${ext}`.length) + '.' + ext;\r\n          } else {\r\n            assetFile = url;\r\n            assetMinFile = url.slice(0, -`.${ext}`.length) + '.min.' + ext;\r\n          }\r\n\r\n          loadUri = this.phoenix.data('windwalker.debug') ? assetFile : assetMinFile;\r\n        }\r\n\r\n        promises.push(\r\n          $.getScript({\r\n            url: this.addUriBase(loadUri),\r\n            cache: true,\r\n            data\r\n          })\r\n        );\r\n      });\r\n\r\n      return $.when(...promises);\r\n    }\r\n\r\n    addUriBase(uri, type = 'path') {\r\n      if (uri.substr(0, 2) === '//' || uri.substr(0, 4) === 'http') {\r\n        return uri;\r\n      }\r\n\r\n      return this.phoenix.asset(type) + '/' + uri;\r\n    }\r\n\r\n    /**\r\n     * Keep alive.\r\n     *\r\n     * @param {string} url\r\n     * @param {Number} time\r\n     *\r\n     * @return {number}\r\n     */\r\n    keepAlive(url, time) {\r\n      return this.aliveHandle = window.setInterval(() => $.get('/'), time);\r\n    }\r\n\r\n    /**\r\n     * Stop keep alive\r\n     */\r\n    stopKeepAlive() {\r\n      clearInterval(this.aliveHandle);\r\n    }\r\n\r\n    /**\r\n     * Number format like php function.\r\n     *\r\n     * @param {string|number} number\r\n     * @param {number}        decimals\r\n     * @param {string}        decPoint\r\n     * @param {string}        thousandsSep\r\n     * @returns {string}\r\n     */\r\n    numberFormat(number, decimals = 0, decPoint = '.', thousandsSep = ',') {\r\n      decimals = decimals || 0;\r\n      number = parseFloat(number);\r\n\r\n      let roundedNumber = Math.round(Math.abs(number) * ('1e' + decimals)) + '';\r\n      let numbersString = decimals ? roundedNumber.slice(0, decimals * -1) : roundedNumber;\r\n      let decimalsString = decimals ? roundedNumber.slice(decimals * -1) : '';\r\n      let formattedNumber = \"\";\r\n\r\n      while (numbersString.length > 3) {\r\n        formattedNumber += thousandsSep + numbersString.slice(-3);\r\n        numbersString = numbersString.slice(0, -3);\r\n      }\r\n\r\n      return (number < 0 ? '-' : '') + numbersString + formattedNumber + (decimalsString ? (decPoint + decimalsString) : '');\r\n    }\r\n  }\r\n\r\n  window.PhoenixHelper = PhoenixHelper;\r\n\r\n  // Fork sprintf here to reduce requests\r\n  (function() {\r\n    var re = {\r\n      not_string: /[^s]/,\r\n      not_bool: /[^t]/,\r\n      not_type: /[^T]/,\r\n      not_primitive: /[^v]/,\r\n      number: /[diefg]/,\r\n      numeric_arg: /[bcdiefguxX]/,\r\n      json: /[j]/,\r\n      not_json: /[^j]/,\r\n      text: /^[^\\x25]+/,\r\n      modulo: /^\\x25{2}/,\r\n      placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\r\n      key: /^([a-z_][a-z_\\d]*)/i,\r\n      key_access: /^\\.([a-z_][a-z_\\d]*)/i,\r\n      index_access: /^\\[(\\d+)\\]/,\r\n      sign: /^[\\+\\-]/\r\n    }\r\n\r\n    function sprintf(key) {\r\n      // `arguments` is not an array, but should be fine for this call\r\n      return sprintf_format(sprintf_parse(key), arguments)\r\n    }\r\n\r\n    function vsprintf(fmt, argv) {\r\n      return sprintf.apply(null, [fmt].concat(argv || []))\r\n    }\r\n\r\n    function sprintf_format(parse_tree, argv) {\r\n      var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, match, pad, pad_character, pad_length, is_positive, sign\r\n      for (i = 0; i < tree_length; i++) {\r\n        if (typeof parse_tree[i] === 'string') {\r\n          output += parse_tree[i]\r\n        }\r\n        else if (Array.isArray(parse_tree[i])) {\r\n          match = parse_tree[i] // convenience purposes only\r\n          if (match[2]) { // keyword argument\r\n            arg = argv[cursor]\r\n            for (k = 0; k < match[2].length; k++) {\r\n              if (!arg.hasOwnProperty(match[2][k])) {\r\n                throw new Error(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]))\r\n              }\r\n              arg = arg[match[2][k]]\r\n            }\r\n          }\r\n          else if (match[1]) { // positional argument (explicit)\r\n            arg = argv[match[1]]\r\n          }\r\n          else { // positional argument (implicit)\r\n            arg = argv[cursor++]\r\n          }\r\n\r\n          if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && arg instanceof Function) {\r\n            arg = arg()\r\n          }\r\n\r\n          if (re.numeric_arg.test(match[8]) && (typeof arg !== 'number' && isNaN(arg))) {\r\n            throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\r\n          }\r\n\r\n          if (re.number.test(match[8])) {\r\n            is_positive = arg >= 0\r\n          }\r\n\r\n          switch (match[8]) {\r\n            case 'b':\r\n              arg = parseInt(arg, 10).toString(2)\r\n              break\r\n            case 'c':\r\n              arg = String.fromCharCode(parseInt(arg, 10))\r\n              break\r\n            case 'd':\r\n            case 'i':\r\n              arg = parseInt(arg, 10)\r\n              break\r\n            case 'j':\r\n              arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\r\n              break\r\n            case 'e':\r\n              arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential()\r\n              break\r\n            case 'f':\r\n              arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\r\n              break\r\n            case 'g':\r\n              arg = match[7] ? String(Number(arg.toPrecision(match[7]))) : parseFloat(arg)\r\n              break\r\n            case 'o':\r\n              arg = (parseInt(arg, 10) >>> 0).toString(8)\r\n              break\r\n            case 's':\r\n              arg = String(arg)\r\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n              break\r\n            case 't':\r\n              arg = String(!!arg)\r\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n              break\r\n            case 'T':\r\n              arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\r\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n              break\r\n            case 'u':\r\n              arg = parseInt(arg, 10) >>> 0\r\n              break\r\n            case 'v':\r\n              arg = arg.valueOf()\r\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n              break\r\n            case 'x':\r\n              arg = (parseInt(arg, 10) >>> 0).toString(16)\r\n              break\r\n            case 'X':\r\n              arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\r\n              break\r\n          }\r\n          if (re.json.test(match[8])) {\r\n            output += arg\r\n          }\r\n          else {\r\n            if (re.number.test(match[8]) && (!is_positive || match[3])) {\r\n              sign = is_positive ? '+' : '-'\r\n              arg = arg.toString().replace(re.sign, '')\r\n            }\r\n            else {\r\n              sign = ''\r\n            }\r\n            pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' '\r\n            pad_length = match[6] - (sign + arg).length\r\n            pad = match[6] ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\r\n            output += match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\r\n          }\r\n        }\r\n      }\r\n      return output\r\n    }\r\n\r\n    var sprintf_cache = Object.create(null)\r\n\r\n    function sprintf_parse(fmt) {\r\n      if (sprintf_cache[fmt]) {\r\n        return sprintf_cache[fmt]\r\n      }\r\n\r\n      var _fmt = fmt, match, parse_tree = [], arg_names = 0\r\n      while (_fmt) {\r\n        if ((match = re.text.exec(_fmt)) !== null) {\r\n          parse_tree.push(match[0])\r\n        }\r\n        else if ((match = re.modulo.exec(_fmt)) !== null) {\r\n          parse_tree.push('%')\r\n        }\r\n        else if ((match = re.placeholder.exec(_fmt)) !== null) {\r\n          if (match[2]) {\r\n            arg_names |= 1\r\n            var field_list = [], replacement_field = match[2], field_match = []\r\n            if ((field_match = re.key.exec(replacement_field)) !== null) {\r\n              field_list.push(field_match[1])\r\n              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\r\n                if ((field_match = re.key_access.exec(replacement_field)) !== null) {\r\n                  field_list.push(field_match[1])\r\n                }\r\n                else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\r\n                  field_list.push(field_match[1])\r\n                }\r\n                else {\r\n                  throw new SyntaxError('[sprintf] failed to parse named argument key')\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              throw new SyntaxError('[sprintf] failed to parse named argument key')\r\n            }\r\n            match[2] = field_list\r\n          }\r\n          else {\r\n            arg_names |= 2\r\n          }\r\n          if (arg_names === 3) {\r\n            throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\r\n          }\r\n          parse_tree.push(match)\r\n        }\r\n        else {\r\n          throw new SyntaxError('[sprintf] unexpected placeholder')\r\n        }\r\n\r\n        _fmt = _fmt.substring(match[0].length)\r\n      }\r\n      return sprintf_cache[fmt] = parse_tree\r\n    }\r\n\r\n    // Push to class\r\n    PhoenixHelper.prototype.sprintf = sprintf;\r\n    PhoenixHelper.prototype.vsprintf = vsprintf;\r\n\r\n  })(PhoenixHelper);\r\n})(jQuery);\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n(($) => {\r\n  class PhoenixUI extends PhoenixPlugin {\r\n    static get is() { return 'UI'; }\r\n\r\n    static get defaultOptions() {\r\n      return {\r\n        messageSelector: '.message-wrap'\r\n      };\r\n    }\r\n\r\n    static get proxies() {\r\n      return {\r\n        addMessage: 'renderMessage'\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.aliveHandle = null;\r\n    }\r\n\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.messageContainer = $(this.options.messageSelector);\r\n\r\n      this.phoenix.on('validation.response', event => {\r\n        this.showValidateResponse(event.validation, event.state, event.$input, event.help);\r\n      });\r\n\r\n      this.phoenix.on('validation.remove', event => {\r\n        this.removeValidateResponse(event.$element);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Show Validation response.\r\n     *\r\n     * @param {PhoenixValidation} validation\r\n     * @param {string}            state\r\n     * @param {jQuery}            $input\r\n     * @param {string}            help\r\n     */\r\n    showValidateResponse(validation, state, $input, help) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Add validate effect to input, just override this method to fit other templates.\r\n     *\r\n     * @param {jQuery} $control\r\n     * @param {jQuery} $input\r\n     * @param {string} icon\r\n     * @param {string} type\r\n     * @param {string} help\r\n     */\r\n    addValidateResponse($control, $input, icon, type, help) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Remove validation response.\r\n     *\r\n     * @param {jQuery} $element\r\n     */\r\n    removeValidateResponse($element) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Render message.\r\n     *\r\n     * @param {string|Array} msg\r\n     * @param {string}       type\r\n     */\r\n    renderMessage(msg, type) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Remove all messages.\r\n     */\r\n    removeMessages() {\r\n      this.messageContainer.children().each(function() {\r\n        this.remove();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Toggle filter bar.\r\n     *\r\n     * @param {jQuery} container\r\n     * @param {jQuery} button\r\n     */\r\n    toggleFilter(container, button) {\r\n      const showClass = button.attr('data-class-show') || 'btn-primary';\r\n      const hideClass = button.attr('data-class-hide') || 'btn-default';\r\n\r\n      const icon = button.find('span.filter-button-icon');\r\n      const iconShowClass = icon.attr('data-class-show') || 'fa fa-angle-up';\r\n      const iconHideClass = icon.attr('data-class-hide') || 'fa fa-angle-down';\r\n\r\n      if (container.hasClass('shown')) {\r\n        button.removeClass(showClass).addClass(hideClass);\r\n        container.hide('fast');\r\n        container.removeClass('shown');\r\n\r\n        icon.removeClass(iconShowClass).addClass(iconHideClass);\r\n      } else {\r\n        button.removeClass(hideClass).addClass(showClass);\r\n        container.show('fast');\r\n        container.addClass('shown');\r\n\r\n        icon.removeClass(iconHideClass).addClass(iconShowClass);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Confirm popup.\r\n     *\r\n     * TODO: Move to core.\r\n     *\r\n     * @param {string}   message\r\n     * @param {Function} callback\r\n     */\r\n    confirm(message, callback) {\r\n      message = message || 'Are you sure?';\r\n\r\n      const confirmed = confirm(message);\r\n\r\n      callback(confirmed);\r\n\r\n      return confirmed;\r\n    }\r\n\r\n    /**\r\n     * Keep alive.\r\n     *\r\n     * @param {string} url\r\n     * @param {Number} time\r\n     *\r\n     * @return {number}\r\n     */\r\n    keepAlive(url, time) {\r\n      return this.aliveHandle = window.setInterval(() => $.get('/'), time);\r\n    }\r\n\r\n    stopKeepAlive() {\r\n      clearInterval(this.aliveHandle);\r\n    }\r\n  }\r\n\r\n  window.PhoenixUI = PhoenixUI;\r\n})(jQuery);\r\n","/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n/**\r\n * Phoenix.Router\r\n */\r\n(($) => {\r\n  \"use strict\";\r\n\r\n  class PhoenixRouter extends PhoenixPlugin {\r\n    static get is() { return 'Router' }\r\n\r\n    static get proxies() {\r\n      return {\r\n        addRoute: 'add',\r\n        route: 'route'\r\n      };\r\n    }\r\n\r\n    ready() {\r\n      $(window).on('popstate', (e) => this.phoenix.on('router.popstate', e));\r\n    }\r\n\r\n    /**\r\n     * Add a route.\r\n     *\r\n     * @param route\r\n     * @param url\r\n     *\r\n     * @returns {PhoenixRouter}\r\n     */\r\n    add(route, url) {\r\n      const data = {};\r\n      data[route] = url;\r\n\r\n      this.phoenix.data('phoenix.routes', data);\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Get route.\r\n     *\r\n     * @param route\r\n     * @param query\r\n     * @returns {String|PhoenixRouter}\r\n     */\r\n    route(route, query = null) {\r\n      let url = this.phoenix.data('phoenix.routes')[route];\r\n\r\n      if (url === undefined) {\r\n        throw new Error('Route: \"' + route + '\" not found');\r\n      }\r\n\r\n      return this.addQuery(url, query);\r\n    }\r\n\r\n    addQuery(url, query = null) {\r\n      if (query === null) {\r\n        return url;\r\n      }\r\n\r\n      query = $.param(query);\r\n\r\n      return url + (/\\?/.test(url) ? '&' + query : '?' + query);\r\n    }\r\n\r\n    push(data) {\r\n      if (typeof data === 'string') {\r\n        data = {uri: data};\r\n      }\r\n\r\n      window.history.pushState(\r\n        data.state || null,\r\n        data.title || null,\r\n        data.uri || this.route(data.route, data.params)\r\n      );\r\n\r\n      return this;\r\n    }\r\n\r\n    replace(data) {\r\n      if (typeof data === 'string') {\r\n        data = {uri: data};\r\n      }\r\n\r\n      window.history.replaceState(\r\n        data.state || null,\r\n        data.title || null,\r\n        data.uri || this.route(data.route, data.params)\r\n      );\r\n\r\n      return this;\r\n    }\r\n\r\n    state() {\r\n      return window.history.state;\r\n    }\r\n\r\n    back() {\r\n      window.history.back();\r\n    }\r\n\r\n    forward() {\r\n      window.history.forward();\r\n    }\r\n\r\n    go(num) {\r\n      window.history.go(num);\r\n    }\r\n  }\r\n\r\n  window.PhoenixRouter = PhoenixRouter;\r\n})(jQuery);\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n(function($) {\r\n  \"use strict\";\r\n\r\n  class PhoenixAjax extends PhoenixPlugin {\r\n    static get is() { return 'Ajax' }\r\n\r\n    static get proxies() {\r\n      return {};\r\n    }\r\n\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.$ = $;\r\n\r\n      this.config = {\r\n        customMethod: false\r\n      };\r\n      \r\n      this.data = {};\r\n      \r\n      this.headers = {\r\n        GET: {},\r\n        POST: {},\r\n        PUT: {},\r\n        PATCH: {},\r\n        DELETE: {},\r\n        HEAD: {},\r\n        OPTIONS: {},\r\n        _global: {}\r\n      }\r\n    }\r\n\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.headers._global['X-CSRF-Token'] = this.phoenix.data('csrf-token');\r\n    }\r\n\r\n    /**\r\n     * Send a GET request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    get(url, data, headers, options) {\r\n      return this.request('GET', url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send a POST request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    post(url, data, headers, options) {\r\n      return this.request('POST', url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send a PUT request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    put(url, data, headers, options) {\r\n      return this.request('PUT', url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send a PATCH request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    patch(url, data, headers, options) {\r\n      return this.request('PATCH', url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send a DELETE request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    sendDelete(url, data, headers, options) {\r\n      return this['delete'](url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send a DELETE request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    'delete'(url, data, headers, options) {\r\n      return this.request('DELETE', url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send a HEAD request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    head(url, data, headers, options) {\r\n      return this.request('HEAD', url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send a OPTIONS request.\r\n     *\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    options(url, data, headers, options) {\r\n      return this.request('OPTIONS', url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send request.\r\n     *\r\n     * @param {string} method\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    sendRequest(method, url, data, headers, options) {\r\n      return this.request(method, url, data, headers, options);\r\n    }\r\n\r\n    /**\r\n     * Send request.\r\n     *\r\n     * @param {string} method\r\n     * @param {string} url\r\n     * @param {Object} data\r\n     * @param {Object} headers\r\n     * @param {Object} options\r\n     *\r\n     * @returns {jqXHR}\r\n     */\r\n    request(method, url, data, headers, options) {\r\n      options = options || {};\r\n      headers = headers || {};\r\n      data = data || {};\r\n      url = url || '';\r\n\r\n      if (typeof url === 'object') {\r\n        options = url;\r\n        url = options.url;\r\n      }\r\n\r\n      options.data = typeof data === 'string' ? data : $.extend(true, {}, this.data, options.data, data);\r\n      options.type = method.toUpperCase() || 'GET';\r\n      var type = options.type;\r\n\r\n      if (['POST', 'GET'].indexOf(options.type) === -1 && this.config.customMethod) {\r\n        headers['X-HTTP-Method-Override'] = options.type;\r\n        options.data._method = options.type;\r\n        options.type = 'POST';\r\n      }\r\n\r\n      options.headers = $.extend(true, {}, this.headers._global, this.headers[type], options.headers, headers);\r\n\r\n      return this.$.ajax(url, options);\r\n    }\r\n\r\n    /**\r\n     * Set custom method with _method parameter.\r\n     *\r\n     * This method will return a clone of this object to help us send request once.\r\n     *\r\n     * @returns {Ajax}\r\n     */\r\n    customMethod() {\r\n      var clone = $.extend(true, {}, this);\r\n\r\n      clone.config.customMethod = true;\r\n\r\n      return clone;\r\n    }\r\n  }\r\n\r\n  window.PhoenixAjax = PhoenixAjax;\r\n\r\n})(jQuery);\r\n","/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n/**\r\n * PhoenixCrypto\r\n */\r\n(function() {\r\n  \"use strict\";\r\n\r\n  let globalSerial = 1;\r\n\r\n  class PhoenixCrypto extends PhoenixPlugin {\r\n    static get is() { return 'Crypto' }\r\n\r\n    static get proxies() {\r\n      return {\r\n        base64Encode: 'base64Encode',\r\n        base64Decode: 'base64Decode',\r\n        encrypt: 'encrypt',\r\n        decrypt: 'decrypt',\r\n        uuid4: 'uuid4',\r\n        md5: 'md5',\r\n        uniqid: 'uniqid'\r\n      };\r\n    }\r\n\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    /**\r\n     * Base64 encode.\r\n     *\r\n     * @param {string} string\r\n     *\r\n     * @returns {string}\r\n     */\r\n    base64Encode(string) {\r\n      return btoa(string);\r\n    }\r\n\r\n    /**\r\n     * Base64 decode.\r\n     *\r\n     * @param {string} string\r\n     *\r\n     * @returns {string}\r\n     */\r\n    base64Decode(string) {\r\n      return atob(string);\r\n    }\r\n\r\n    /**\r\n     * XOR Cipher encrypt.\r\n     *\r\n     * @param {string} key\r\n     * @param {string} data\r\n     */\r\n    encrypt(key, data) {\r\n      const code = data.split('').map((c, i) => c.charCodeAt(0) ^ this.keyCharAt(key, i)).join(',');\r\n\r\n      return this.base64Encode(code);\r\n    }\r\n\r\n    /**\r\n     * XOR Cipher decrypt.\r\n     *\r\n     * @param {string} key\r\n     * @param {string} data\r\n     *\r\n     * @returns {string}\r\n     */\r\n    decrypt(key, data) {\r\n      data = this.base64Decode(data);\r\n\r\n      data = data.split(',');\r\n\r\n      return data.map((c, i) => String.fromCharCode(c ^ this.keyCharAt(key, i))).join(\"\");\r\n    }\r\n\r\n    /**\r\n     * Key char at.\r\n     *\r\n     * @param {string} key\r\n     * @param {Number} i\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    keyCharAt(key, i) {\r\n      return key.charCodeAt(Math.floor(i % key.length));\r\n    }\r\n\r\n    /**\r\n     * UUID v4\r\n     *\r\n     * @see  https://gist.github.com/jed/982883\r\n     *\r\n     * @returns {string}\r\n     */\r\n    uuid4() {\r\n      return (function b(a) {\r\n        return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b)\r\n      })();\r\n    }\r\n\r\n    /**\r\n     * Get uniqid like php's unidid().\r\n     *\r\n     * @see http://locutus.io/php/misc/uniqid/\r\n     *\r\n     * @param {string}  prefix\r\n     * @param {boolean} moreEntropy\r\n     * @returns {*}\r\n     */\r\n    uniqid (prefix = '', moreEntropy = false) {\r\n      let retId;\r\n      const _formatSeed = function (seed, reqWidth) {\r\n        seed = parseInt(seed, 10).toString(16); // to hex str\r\n        if (reqWidth < seed.length) {\r\n          // so long we split\r\n          return seed.slice(seed.length - reqWidth)\r\n        }\r\n        if (reqWidth > seed.length) {\r\n          // so short we pad\r\n          return Array(1 + (reqWidth - seed.length)).join('0') + seed\r\n        }\r\n        return seed\r\n      };\r\n\r\n      const $global = (typeof window !== 'undefined' ? window : global);\r\n      $global.$locutus = $global.$locutus || {};\r\n      const $locutus = $global.$locutus;\r\n      $locutus.php = $locutus.php || {};\r\n\r\n      if (!$locutus.php.uniqidSeed) {\r\n        // init seed with big random int\r\n        $locutus.php.uniqidSeed = Math.floor(Math.random() * 0x75bcd15)\r\n      }\r\n\r\n      $locutus.php.uniqidSeed++;\r\n\r\n      // start with prefix, add current milliseconds hex string\r\n      retId = prefix;\r\n      retId += _formatSeed(parseInt(new Date().getTime() / 1000, 10), 8);\r\n      // add seed hex string\r\n      retId += _formatSeed($locutus.php.uniqidSeed, 5);\r\n\r\n      if (moreEntropy) {\r\n        // for more entropy we add a float lower to 10\r\n        retId += (Math.random() * 10).toFixed(8).toString()\r\n      }\r\n\r\n      return retId;\r\n    }\r\n\r\n    serial() {\r\n      return globalSerial++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Javascript-MD5\r\n   *\r\n   * @link  https://github.com/blueimp/JavaScript-MD5\r\n   */\r\n  (function(Crypto) {\r\n    /*\r\n     * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n     * to work around bugs in some JS interpreters.\r\n     */\r\n    function safe_add(x, y) {\r\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF)\r\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\r\n      return (msw << 16) | (lsw & 0xFFFF)\r\n    }\r\n\r\n    /*\r\n     * Bitwise rotate a 32-bit number to the left.\r\n     */\r\n    function bit_rol(num, cnt) {\r\n      return (num << cnt) | (num >>> (32 - cnt))\r\n    }\r\n\r\n    /*\r\n     * These functions implement the four basic operations the algorithm uses.\r\n     */\r\n    function md5_cmn(q, a, b, x, s, t) {\r\n      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b)\r\n    }\r\n\r\n    function md5_ff(a, b, c, d, x, s, t) {\r\n      return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t)\r\n    }\r\n\r\n    function md5_gg(a, b, c, d, x, s, t) {\r\n      return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t)\r\n    }\r\n\r\n    function md5_hh(a, b, c, d, x, s, t) {\r\n      return md5_cmn(b ^ c ^ d, a, b, x, s, t)\r\n    }\r\n\r\n    function md5_ii(a, b, c, d, x, s, t) {\r\n      return md5_cmn(c ^ (b | (~d)), a, b, x, s, t)\r\n    }\r\n\r\n    /*\r\n     * Calculate the MD5 of an array of little-endian words, and a bit length.\r\n     */\r\n    function binl_md5(x, len) {\r\n      /* append padding */\r\n      x[len >> 5] |= 0x80 << (len % 32);\r\n      x[(((len + 64) >>> 9) << 4) + 14] = len;\r\n\r\n      var i;\r\n      var olda;\r\n      var oldb;\r\n      var oldc;\r\n      var oldd;\r\n      var a = 1732584193;\r\n      var b = -271733879;\r\n      var c = -1732584194;\r\n      var d = 271733878;\r\n\r\n      for (i = 0; i < x.length; i += 16) {\r\n        olda = a;\r\n        oldb = b;\r\n        oldc = c;\r\n        oldd = d;\r\n\r\n        a = md5_ff(a, b, c, d, x[i], 7, -680876936);\r\n        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\r\n        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\r\n        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\r\n        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\r\n        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\r\n        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\r\n        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\r\n        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\r\n        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\r\n        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\r\n        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\r\n        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\r\n        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\r\n        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\r\n        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\r\n\r\n        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\r\n        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\r\n        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\r\n        b = md5_gg(b, c, d, a, x[i], 20, -373897302);\r\n        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\r\n        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\r\n        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\r\n        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\r\n        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\r\n        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\r\n        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\r\n        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\r\n        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\r\n        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\r\n        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\r\n        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\r\n\r\n        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\r\n        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\r\n        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\r\n        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\r\n        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\r\n        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\r\n        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\r\n        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\r\n        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\r\n        d = md5_hh(d, a, b, c, x[i], 11, -358537222);\r\n        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\r\n        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\r\n        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\r\n        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\r\n        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\r\n        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\r\n\r\n        a = md5_ii(a, b, c, d, x[i], 6, -198630844);\r\n        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\r\n        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\r\n        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\r\n        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\r\n        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\r\n        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\r\n        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\r\n        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\r\n        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\r\n        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\r\n        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\r\n        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\r\n        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\r\n        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\r\n        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\r\n\r\n        a = safe_add(a, olda);\r\n        b = safe_add(b, oldb);\r\n        c = safe_add(c, oldc);\r\n        d = safe_add(d, oldd);\r\n      }\r\n      return [a, b, c, d]\r\n    }\r\n\r\n    /*\r\n     * Convert an array of little-endian words to a string\r\n     */\r\n    function binl2rstr(input) {\r\n      var i;\r\n      var output = '';\r\n      for (i = 0; i < input.length * 32; i += 8) {\r\n        output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF)\r\n      }\r\n      return output\r\n    }\r\n\r\n    /*\r\n     * Convert a raw string to an array of little-endian words\r\n     * Characters >255 have their high-byte silently ignored.\r\n     */\r\n    function rstr2binl(input) {\r\n      var i;\r\n      var output = [];\r\n      output[(input.length >> 2) - 1] = undefined;\r\n      for (i = 0; i < output.length; i += 1) {\r\n        output[i] = 0\r\n      }\r\n      for (i = 0; i < input.length * 8; i += 8) {\r\n        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32)\r\n      }\r\n      return output\r\n    }\r\n\r\n    /*\r\n     * Calculate the MD5 of a raw string\r\n     */\r\n    function rstr_md5(s) {\r\n      return binl2rstr(binl_md5(rstr2binl(s), s.length * 8))\r\n    }\r\n\r\n    /*\r\n     * Calculate the HMAC-MD5, of a key and some data (raw strings)\r\n     */\r\n    function rstr_hmac_md5(key, data) {\r\n      var i;\r\n      var bkey = rstr2binl(key);\r\n      var ipad = [];\r\n      var opad = [];\r\n      var hash;\r\n      ipad[15] = opad[15] = undefined;\r\n      if (bkey.length > 16) {\r\n        bkey = binl_md5(bkey, key.length * 8)\r\n      }\r\n      for (i = 0; i < 16; i += 1) {\r\n        ipad[i] = bkey[i] ^ 0x36363636;\r\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n      }\r\n      hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\r\n      return binl2rstr(binl_md5(opad.concat(hash), 512 + 128))\r\n    }\r\n\r\n    /*\r\n     * Convert a raw string to a hex string\r\n     */\r\n    function rstr2hex(input) {\r\n      var hex_tab = '0123456789abcdef';\r\n      var output = '';\r\n      var x;\r\n      var i;\r\n      for (i = 0; i < input.length; i += 1) {\r\n        x = input.charCodeAt(i);\r\n        output += hex_tab.charAt((x >>> 4) & 0x0F) +\r\n          hex_tab.charAt(x & 0x0F)\r\n      }\r\n      return output\r\n    }\r\n\r\n    /*\r\n     * Encode a string as utf-8\r\n     */\r\n    function str2rstr_utf8(input) {\r\n      return decodeURIComponent(encodeURIComponent(input))\r\n    }\r\n\r\n    /*\r\n     * Take string arguments and return either raw or hex encoded strings\r\n     */\r\n    function raw_md5(s) {\r\n      return rstr_md5(str2rstr_utf8(s))\r\n    }\r\n\r\n    function hex_md5(s) {\r\n      return rstr2hex(raw_md5(s))\r\n    }\r\n\r\n    function raw_hmac_md5(k, d) {\r\n      return rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))\r\n    }\r\n\r\n    function hex_hmac_md5(k, d) {\r\n      return rstr2hex(raw_hmac_md5(k, d))\r\n    }\r\n\r\n    function md5(string, key, raw) {\r\n      if (!key) {\r\n        if (!raw) {\r\n          return hex_md5(string)\r\n        }\r\n        return raw_md5(string)\r\n      }\r\n      if (!raw) {\r\n        return hex_hmac_md5(key, string)\r\n      }\r\n      return raw_hmac_md5(key, string)\r\n    }\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n      define(function() {\r\n        return md5\r\n      })\r\n    } else if (typeof module === 'object' && module.exports) {\r\n      module.exports = md5\r\n    }\r\n\r\n    PhoenixCrypto.prototype.md5 = md5;\r\n  })(PhoenixCrypto);\r\n\r\n  window.PhoenixCrypto = PhoenixCrypto;\r\n})();\r\n","/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n/**\r\n * Phoenix.Translator\r\n */\r\n(() => {\r\n  \"use strict\";\r\n\r\n  class PhoenixTranslator extends PhoenixPlugin {\r\n    static get is() { return 'Translator' }\r\n\r\n    static get proxies() {\r\n      return {\r\n        trans: 'translate',\r\n        __: 'translate',\r\n        addLanguage: 'addKey',\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.keys = {};\r\n    }\r\n\r\n    /**\r\n     * Translate a string.\r\n     *\r\n     * @param {string} text\r\n     * @param {Array}  args\r\n     * @returns {string}\r\n     */\r\n    translate(text, ...args) {\r\n      const key = this.normalize(text);\r\n\r\n      if (args.length) {\r\n        return this.sprintf(text, ...args);\r\n      }\r\n\r\n      return this.find(key);\r\n    }\r\n\r\n    /**\r\n     * Sptintf language string.\r\n     * @param {string} text\r\n     * @param {Array} args\r\n     */\r\n    sprintf(text, ...args) {\r\n      return this.phoenix.vsprintf(this.find(text), args);\r\n    }\r\n\r\n    /**\r\n     * Find text.\r\n     * @param {string} key\r\n     * @returns {*}\r\n     */\r\n    find(key) {\r\n      const langs = this.phoenix.data('phoenix.languages');\r\n\r\n      if (langs[key]) {\r\n        return langs[key];\r\n      }\r\n\r\n      return key;\r\n    }\r\n\r\n    /**\r\n     * Has language key.\r\n     * @param {string} key\r\n     * @returns {boolean}\r\n     */\r\n    has(key) {\r\n      const langs = this.phoenix.data('phoenix.languages');\r\n\r\n      return langs[key] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Add language key.\r\n     *\r\n     * @param {string} key\r\n     * @param {string} value\r\n     *\r\n     * @return {PhoenixTranslator}\r\n     */\r\n    addKey(key, value) {\r\n      const data = {};\r\n      data[this.normalize(key)] = value;\r\n\r\n      this.phoenix.data('phoenix.languages', data);\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Replace all symbols to dot(.).\r\n     *\r\n     * @param {string} text\r\n     *\r\n     * @return {string}\r\n     */\r\n     normalize(text) {\r\n      return text.replace(/[^A-Z0-9]+/ig, '.');\r\n    }\r\n  }\r\n\r\n  window.PhoenixTranslator = PhoenixTranslator;\r\n})();\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n(() => {\r\n  let formInited = false;\r\n  let gridInited = false;\r\n\r\n  class PhoenixLegacy extends PhoenixPlugin {\r\n    static get is() {\r\n      return 'Legacy';\r\n    }\r\n\r\n    created() {\r\n      const phoenix = this.phoenix;\r\n\r\n      phoenix.Theme = phoenix.UI;\r\n\r\n      phoenix.on('jquery.plugin.created', event => {\r\n        const debug = this.phoenix.data('windwalker.debug');\r\n\r\n        // Legacy Form polyfill\r\n        if (!formInited && event.name === 'form') {\r\n          ['delete', 'get', 'patch', 'post', 'put', 'sendDelete', 'submit'].forEach((method) => {\r\n            phoenix[method] = (...args) => {\r\n              debug ? this.constructor.warn('Phoenix', method) : null;\r\n              return event.instance[method](...args);\r\n            }\r\n          });\r\n\r\n          formInited = true;\r\n        }\r\n\r\n        // Legacy Grid polyfill\r\n        if (!gridInited && event.name === 'grid') {\r\n          ['toggleFilter', 'sort', 'checkRow', 'updateRow', 'doTask', 'batch', 'copyRow', 'deleteList', 'deleteRow',\r\n            'toggleAll', 'countChecked', 'getChecked', 'hasChecked', 'reorderAll', 'reorder']\r\n            .forEach((method) => {\r\n              phoenix.Grid[method] = (...args) => {\r\n                debug ? this.constructor.warn('Phoenix.Grid', method) : null;\r\n                return event.instance[method](...args);\r\n              }\r\n            });\r\n\r\n          gridInited = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    ready() {\r\n      super.ready();\r\n    }\r\n\r\n    static warn(obj, method) {\r\n      console.warn(`Calling ${obj}.${method}() is deprecated.`);\r\n    }\r\n  }\r\n\r\n  window.PhoenixLegacy = PhoenixLegacy;\r\n})();\r\n"]}