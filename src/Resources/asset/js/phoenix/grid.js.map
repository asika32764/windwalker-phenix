{"version":3,"sources":["grid.js"],"names":["$","PhoenixGrid","grid","PhoenixGridElement","PhoenixJQueryPlugin","mainSelector","selector","search","container","button","clearButton","filter","sort","element","options","phoenix","form","extend","constructor","defaultOptions","core","ui","UI","searchContainer","find","searchButton","searchClearButton","filterContainer","filterButton","sortButtons","registerEvents","self","click","event","val","submit","toggleFilter","stopPropagation","preventDefault","ordering","direction","orderingInput","length","append","directionInput","put","row","value","ch","Error","checked","url","queries","toggleAll","checkRow","patch","task","updateRow","post","message","Phoenix","Translator","translate","confirm","isConfirm","msg","deleteList","duration","checkboxes","each","i","e","setTimeout","getChecked","result","push","countChecked","alert","origin","originOrdering","split","inputs","$this","data","tr","parents","group","siblings","prop","batch","delta","doTask","window","jQuery"],"mappings":"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","file":"grid.js","sourcesContent":["/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n/**\r\n * PhoenixGrid\r\n */\r\n;(function($) {\r\n  \"use strict\";\r\n\r\n  class PhoenixGrid extends PhoenixJQueryPlugin {\r\n    static get is() { return 'Grid'; }\r\n\r\n    static get proxies() {\r\n      return {\r\n        grid: 'createPlugin'\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Plugin name.\r\n     * @returns {string}\r\n     */\r\n    static get pluginName() { return 'grid' }\r\n\r\n    static get pluginClass() { return PhoenixGridElement };\r\n\r\n    /**\r\n     * Default options.\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() { \r\n      return {};\r\n    }\r\n  }\r\n  \r\n  class PhoenixGridElement {\r\n    static get defaultOptions() {\r\n      return {\r\n        mainSelector: '',\r\n        selector: {\r\n          search: {\r\n            container: '.search-container',\r\n            button: '.search-button',\r\n            clearButton: '.search-clear-button'\r\n          },\r\n          filter: {\r\n            container: '.filter-container',\r\n            button: '.filter-toggle-button'\r\n          },\r\n          sort: {\r\n            button: 'a[data-sort-button]'\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    constructor(element, options, phoenix) {\r\n      this.form = element;\r\n      this.options = $.extend(true, {}, this.constructor.defaultOptions, options);\r\n      this.core = phoenix.form(options.mainSelector);\r\n      this.ui = phoenix.UI;\r\n\r\n      var selector = this.options.selector;\r\n\r\n      this.searchContainer = this.form.find(selector.search.container);\r\n      this.searchButton = this.form.find(selector.search.button);\r\n      this.searchClearButton = this.form.find(selector.search.clearButton);\r\n      this.filterContainer = this.form.find(selector.filter.container);\r\n      this.filterButton = this.form.find(selector.filter.button);\r\n      this.sortButtons = this.form.find(selector.sort.button);\r\n\r\n      this.registerEvents();\r\n    }\r\n\r\n    /**\r\n     * Start this object and events.\r\n     */\r\n    registerEvents() {\r\n      var self = this;\r\n\r\n      this.searchClearButton.click(function(event) {\r\n        self.searchContainer.find('input, textarea, select').val('');\r\n        self.filterContainer.find('input, textarea, select').val('');\r\n\r\n        self.form.submit();\r\n      });\r\n\r\n      this.filterButton.click(function(event) {\r\n        self.toggleFilter();\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n      });\r\n\r\n      this.sortButtons.click(function(event) {\r\n        self.sort(this, event);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Toggle filter bar.\r\n     *\r\n     * @returns {PhoenixGrid}\r\n     */\r\n    toggleFilter() {\r\n      this.ui.toggleFilter(this.filterContainer, this.filterButton);\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Sort two items.\r\n     *\r\n     * @param {string} ordering\r\n     * @param {string} direction\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    sort(ordering, direction) {\r\n      var orderingInput = this.form.find('input[name=list_ordering]');\r\n\r\n      if (!orderingInput.length) {\r\n        orderingInput = $('<input name=\"list_ordering\" type=\"hidden\" value=\"\" />');\r\n\r\n        this.form.append(orderingInput);\r\n      }\r\n\r\n      var directionInput = this.form.find('input[name=list_direction]');\r\n\r\n      if (!directionInput.length) {\r\n        directionInput = $('<input name=\"list_direction\" type=\"hidden\" value=\"\" />');\r\n\r\n        this.form.append(directionInput);\r\n      }\r\n\r\n      orderingInput.val(ordering);\r\n      directionInput.val(direction);\r\n\r\n      return this.core.put();\r\n    }\r\n\r\n    /**\r\n     * Check a row's checkbox.\r\n     *\r\n     * @param {number}  row\r\n     * @param {boolean} value\r\n     */\r\n    checkRow(row, value) {\r\n      value = value || true;\r\n\r\n      var ch = this.form.find('input.grid-checkbox[data-row-number=' + row + ']');\r\n\r\n      if (!ch.length) {\r\n        throw new Error('Checkbox of row: ' + row + ' not found.');\r\n      }\r\n\r\n      ch[0].checked = value;\r\n    }\r\n\r\n    /**\r\n     * Update a row.\r\n     *\r\n     * @param  {number} row\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    updateRow(row, url, queries) {\r\n      this.toggleAll(false);\r\n\r\n      this.checkRow(row);\r\n\r\n      return this.core.patch(url, queries);\r\n    }\r\n\r\n    /**\r\n     * Update a row with batch task.\r\n     *\r\n     * @param  {string} task\r\n     * @param  {number} row\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    doTask(task, row, url, queries) {\r\n      queries = queries || {};\r\n\r\n      queries.task = task;\r\n\r\n      return this.updateRow(row, url, queries);\r\n    }\r\n\r\n    /**\r\n     * Batch update items.\r\n     *\r\n     * @param  {string} task\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    batch(task, url, queries) {\r\n      queries = queries || {};\r\n\r\n      queries.task = task;\r\n\r\n      return this.core.patch(url, queries);\r\n    }\r\n\r\n    /**\r\n     * Copy a row.\r\n     *\r\n     * @param  {number} row\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    copyRow(row, url, queries) {\r\n      this.toggleAll(false);\r\n\r\n      this.checkRow(row);\r\n\r\n      return this.core.post(url, queries);\r\n    }\r\n\r\n    /**\r\n     * Delete checked items.\r\n     *\r\n     * @param  {string} message\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    deleteList(message, url, queries) {\r\n      var self = this;\r\n\r\n      message = message || Phoenix.Translator.translate('phoenix.message.delete.confirm');\r\n\r\n      this.core.confirm(message, function(isConfirm) {\r\n        if (isConfirm) {\r\n          self.core['delete'](url, queries);\r\n        }\r\n      });\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Delete an itme.\r\n     *\r\n     * @param  {number} row\r\n     * @param  {string} msg\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    deleteRow(row, msg, url, queries) {\r\n      this.toggleAll(false);\r\n\r\n      this.checkRow(row);\r\n\r\n      return this.deleteList(msg, url, queries);\r\n    }\r\n\r\n    /**\r\n     * Toggle all checkboxes.\r\n     *\r\n     * @param  {boolean}          value     Checked or unchecked.\r\n     * @param  {number|boolean}   duration  Duration to check all.\r\n     */\r\n    toggleAll(value, duration) {\r\n      var checkboxes = this.form.find('input.grid-checkbox[type=checkbox]');\r\n\r\n      $.each(checkboxes, function(i, e) {\r\n        if (duration) {\r\n          // A little pretty effect\r\n          setTimeout(function() {\r\n            e.checked = value;\r\n          }, (duration / checkboxes.length) * i);\r\n        }\r\n        else {\r\n          e.checked = value;\r\n        }\r\n      });\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Count checked checkboxes.\r\n     *\r\n     * @returns {int}\r\n     */\r\n    countChecked() {\r\n      return this.getChecked().length;\r\n    }\r\n\r\n    /**\r\n     * Get Checked boxes.\r\n     *\r\n     * @returns {Element[]}\r\n     */\r\n    getChecked() {\r\n      var checkboxes = this.form.find('input.grid-checkbox[type=checkbox]'),\r\n        result = [];\r\n\r\n      $.each(checkboxes, function(i, e) {\r\n        if (e.checked) {\r\n          result.push(e);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Validate there has one or more checked boxes.\r\n     *\r\n     * @param   {string}  msg\r\n     * @param   {Event}   event\r\n     *\r\n     * @returns {PhoenixGrid}\r\n     */\r\n    hasChecked(msg, event) {\r\n      msg = msg || Phoenix.Translator.translate('phoenix.message.grid.checked');\r\n\r\n      if (!this.countChecked()) {\r\n        alert(msg);\r\n\r\n        // If you send event object as second argument, we will stop all actions.\r\n        if (event) {\r\n          event.stopPropagation();\r\n          event.preventDefault();\r\n        }\r\n\r\n        throw new Error(msg);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder all.\r\n     *\r\n     * @param   {string}  url\r\n     * @param   {Object}  queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    reorderAll(url, queries) {\r\n      var self = this;\r\n      var origin = this.form.find('input[name=origin_ordering]');\r\n\r\n      // If origin exists, we diff them and only send changed group.\r\n      if (origin.length) {\r\n        var originOrdering = origin.val().split(',');\r\n        var inputs = this.form.find('.ordering-control input');\r\n\r\n        this.toggleAll(false);\r\n\r\n        inputs.each(function(i) {\r\n          var $this = $(this);\r\n\r\n          if ($this.val() !== originOrdering[i]) {\r\n            // Check self\r\n            self.checkRow($this.data('order-row'));\r\n\r\n            var tr = $this.parents('tr');\r\n            var group = tr.data('order-group');\r\n\r\n            // Check same group boxes\r\n            if (group !== '') {\r\n              tr.siblings('[data-order-group=' + group + ']')\r\n                .find('input.grid-checkbox')\r\n                .prop('checked', true);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      return this.batch('reorder', url, queries);\r\n    }\r\n\r\n    /**\r\n     * Reorder items.\r\n     *\r\n     * @param  {int}     row\r\n     * @param  {int}     delta\r\n     * @param  {string}  url\r\n     * @param  {Object}  queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    reorder(row, delta, url, queries) {\r\n      queries = queries || {};\r\n      queries.delta = delta;\r\n\r\n      return this.doTask('reorder', row, url, queries);\r\n    }\r\n  }\r\n\r\n  window.PhoenixGrid = PhoenixGrid;\r\n\r\n})(jQuery);\r\n"]}