{"version":3,"sources":["multiselect.js"],"names":["$","PhoenixMultiSelect","duration","inputSelector","$element","options","self","extend","constructor","defaultOptions","form","boxes","find","last","parent","css","on","event","select","element","shiftKey","start","index","end","chs","slice","Math","min","max","each","i","e","setTimeout","checked","length","fn","pluginName","data","jQuery"],"mappings":"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","sourcesContent":["/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n/**\n * PhoenixMultiSelect\n */\n;(function($) {\n  /**\n   * Multi Select.\n   *\n   * @param {jQuery} $element\n   * @param {Object} options\n   *\n   * @constructor\n   */\n  class PhoenixMultiSelect {\n    static get pluginName() { return 'multiselect' }\n    static get defaultOptions() {\n      return {\n        duration: 100,\n        inputSelector: 'input.grid-checkbox[type=checkbox]'\n      }\n    }\n\n    constructor($element, options) {\n      const self = this;\n      this.options = $.extend({}, this.constructor.defaultOptions, options);\n      this.form = $element;\n      this.boxes = $element.find(this.options.inputSelector);\n      this.last = false;\n\n      this.boxes.parent().css('user-select', 'none');\n\n      this.boxes.on('click', function(event) {\n        self.select(this, event);\n      });\n    }\n\n    /**\n     * Do select.\n     *\n     * @param {Element} element\n     * @param {Event}   event\n     */\n    select(element, event) {\n      if (!this.last) {\n        this.last = element;\n\n        return;\n      }\n\n      if (event.shiftKey) {\n        const self = this;\n        const start = this.boxes.index(element);\n        const end = this.boxes.index(this.last);\n\n        const chs = this.boxes.slice(Math.min(start, end), Math.max(start, end) + 1);\n\n        $.each(chs, function(i, e) {\n          if (self.options.duration) {\n            setTimeout(function() {\n              e.checked = self.last.checked;\n            }, (self.options.duration / chs.length) * i);\n          }\n          else {\n            e.checked = self.last.checked;\n          }\n        })\n      }\n\n      this.last = element;\n    }\n  }\n\n  $.fn[PhoenixMultiSelect.pluginName] = function(options) {\n    if (!this.data('phoenix.' + PhoenixMultiSelect.pluginName)) {\n      this.data('phoenix.' + PhoenixMultiSelect.pluginName, new PhoenixMultiSelect(this, options));\n    }\n\n    return this.data('phoenix.' + PhoenixMultiSelect.pluginName);\n  };\n\n})(jQuery);\n"],"file":"multiselect.js"}