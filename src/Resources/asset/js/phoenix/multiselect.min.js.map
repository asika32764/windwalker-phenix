{"version":3,"sources":["multiselect.min.js"],"names":["$","plugin","defaultOptions","duration","PhoenixMultiSelect","$element","options","self","this","form","boxes","find","last","extend","parent","css","on","event","select","prototype","element","shiftKey","start","index","end","chs","slice","Math","min","max","each","i","e","setTimeout","checked","length","fn","data","jQuery"],"mappings":"CAUC,SAAUA,GAMT,IAAIC,EAAS,cAETC,GACFC,SAAU,KAWRC,EAAqB,SAASC,EAAUC,GAC1C,IAAIC,EAAOC,KACXA,KAAKC,KAAOJ,EACZG,KAAKE,MAAQL,EAASM,KAAK,sCAC3BH,KAAKI,MAAO,EACZJ,KAAKF,QAAUN,EAAEa,UAAWX,EAAgBI,GAE5CE,KAAKE,MAAMI,SAASC,IAAI,cAAe,QAEvCP,KAAKE,MAAMM,GAAG,QAAS,SAASC,GAC9BV,EAAKW,OAAOV,KAAMS,MAItBb,EAAmBe,WAOjBD,OAAQ,SAASE,EAASH,GACxB,GAAKT,KAAKI,KAAV,CAMA,GAAIK,EAAMI,SAAU,CAClB,IAAId,EAAOC,KACPc,EAAQd,KAAKE,MAAMa,MAAMH,GACzBI,EAAMhB,KAAKE,MAAMa,MAAMf,KAAKI,MAE5Ba,EAAMjB,KAAKE,MAAMgB,MAAMC,KAAKC,IAAIN,EAAOE,GAAMG,KAAKE,IAAIP,EAAOE,GAAO,GAExExB,EAAE8B,KAAKL,EAAK,SAASM,EAAGC,GAClBzB,EAAKD,QAAQH,SACf8B,WAAW,WACTD,EAAEE,QAAU3B,EAAKK,KAAKsB,SACpB3B,EAAKD,QAAQH,SAAWsB,EAAIU,OAAUJ,GAG1CC,EAAEE,QAAU3B,EAAKK,KAAKsB,UAK5B1B,KAAKI,KAAOQ,OAxBVZ,KAAKI,KAAOQ,IA4BlBpB,EAAEoC,GAAGnC,GAAU,SAASK,GAKtB,OAJKE,KAAK6B,KAAK,WAAapC,IAC1BO,KAAK6B,KAAK,WAAapC,EAAQ,IAAIG,EAAmBI,KAAMF,IAGvDE,KAAK6B,KAAK,WAAapC,IA5EjC,CA+EEqC","file":"multiselect.min.js","sourcesContent":["/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n/**\n * PhoenixMultiSelect\n */\n;(function($) {\n  /**\n   * Plugin name.\n   *\n   * @type {string}\n   */\n  var plugin = 'multiselect';\n\n  var defaultOptions = {\n    duration: 100\n  };\n\n  /**\n   * Multi Select.\n   *\n   * @param {jQuery} $element\n   * @param {Object} options\n   *\n   * @constructor\n   */\n  var PhoenixMultiSelect = function($element, options) {\n    var self = this;\n    this.form = $element;\n    this.boxes = $element.find('input.grid-checkbox[type=checkbox]');\n    this.last = false;\n    this.options = $.extend({}, defaultOptions, options);\n\n    this.boxes.parent().css('user-select', 'none');\n\n    this.boxes.on('click', function(event) {\n      self.select(this, event);\n    });\n  };\n\n  PhoenixMultiSelect.prototype = {\n    /**\n     * Do select.\n     *\n     * @param {Element} element\n     * @param {Event}   event\n     */\n    select: function(element, event) {\n      if (!this.last) {\n        this.last = element;\n\n        return;\n      }\n\n      if (event.shiftKey) {\n        var self = this;\n        var start = this.boxes.index(element);\n        var end = this.boxes.index(this.last);\n\n        var chs = this.boxes.slice(Math.min(start, end), Math.max(start, end) + 1);\n\n        $.each(chs, function(i, e) {\n          if (self.options.duration) {\n            setTimeout(function() {\n              e.checked = self.last.checked;\n            }, (self.options.duration / chs.length) * i);\n          }\n          else {\n            e.checked = self.last.checked;\n          }\n        })\n      }\n\n      this.last = element;\n    }\n  };\n\n  $.fn[plugin] = function(options) {\n    if (!this.data('phoenix.' + plugin)) {\n      this.data('phoenix.' + plugin, new PhoenixMultiSelect(this, options));\n    }\n\n    return this.data('phoenix.' + plugin);\n  };\n\n})(jQuery);\n"]}