{"version":3,"sources":["phoenix.js","plugin.js","helper.js","ui.js","router.js","ajax.js","crypto.js","translator.js","legacy.js"],"names":["$","PhoenixCore","options","extend","constructor","defaultOptions","_listeners","waits","wait","resolve","completed","then","trigger","plugin","Array","isArray","forEach","p","use","is","undefined","Error","name","PhoenixPlugin","instance","install","boot","uninstall","event","handler","e","on","push","once","_once","callback","listeners","filter","listener","args","data","console","debug","value","document","removeData","type","uri","d","Deferred","promise","when","self","fn","ele","window","jQuery","phoenix","toLowerCase","createProxies","resetProxies","created","ready","loaded","proxies","hasOwnProperty","origin","Object","defineProperties","get","set","PhoenixJQueryPlugin","selector","mainSelector","pluginName","pluginClass","PhoenixHelper","isDebug","confirm","keepAlive","stopKeepAlive","loadScript","notify","numberFormat","sprintf","vsprintf","aliveHandle","message","falseCallback","done","catch","confirmed","reject","urls","autoConvert","promises","endsWith","str","suffix","indexOf","length","asset","url","ext","split","pop","loadUri","assetFile","assetMinFile","slice","getScript","addUriBase","cache","substr","addMessage","time","setInterval","clearInterval","number","decimals","decPoint","thousandsSep","parseFloat","roundedNumber","Math","round","abs","numbersString","decimalsString","formattedNumber","re","not_string","not_bool","not_type","not_primitive","numeric_arg","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf_format","sprintf_parse","arguments","fmt","argv","apply","concat","parse_tree","cursor","tree_length","arg","output","i","k","match","pad","pad_character","pad_length","is_positive","test","Function","isNaN","TypeError","parseInt","toString","String","fromCharCode","JSON","stringify","toExponential","toFixed","Number","toPrecision","substring","prototype","call","valueOf","toUpperCase","replace","charAt","repeat","sprintf_cache","create","_fmt","arg_names","exec","field_list","replacement_field","field_match","SyntaxError","PhoenixUI","messageSelector","messageContainer","showValidateResponse","validation","state","$input","help","removeValidateResponse","$element","$control","icon","msg","children","each","remove","container","button","showClass","attr","hideClass","find","iconShowClass","iconHideClass","hasClass","removeClass","addClass","hide","show","PhoenixRouter","route","query","addQuery","param","history","pushState","title","params","replaceState","back","forward","num","go","addRoute","PhoenixAjax","config","customMethod","headers","GET","POST","PUT","PATCH","DELETE","HEAD","OPTIONS","_global","request","method","isFormData","FormData","processData","contentType","dataType","_method","ajax","fail","xhr","error","statusText","clone","globalSerial","PhoenixCrypto","string","btoa","atob","code","map","c","charCodeAt","keyCharAt","join","base64Encode","base64Decode","floor","b","a","random","prefix","moreEntropy","retId","_formatSeed","seed","reqWidth","$global","global","$locutus","php","uniqidSeed","Date","getTime","encrypt","decrypt","uuid4","md5","uniqid","Crypto","safe_add","x","y","lsw","msw","bit_rol","cnt","md5_cmn","q","s","t","md5_ff","md5_gg","md5_hh","md5_ii","binl_md5","len","olda","oldb","oldc","oldd","binl2rstr","input","rstr2binl","rstr_md5","rstr_hmac_md5","bkey","ipad","opad","hash","rstr2hex","hex_tab","str2rstr_utf8","decodeURIComponent","encodeURIComponent","raw_md5","hex_md5","raw_hmac_md5","hex_hmac_md5","raw","define","amd","module","exports","PhoenixTranslator","trans","__","addLanguage","keys","normalize","langs","formInited","gridInited","PhoenixLegacy","Theme","UI","Uri","warn","Grid","obj"],"mappings":"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","file":"phoenix.js","sourcesContent":["/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\n($ => {\n  class PhoenixCore {\n    /**\n     * Default options.\n     * @returns {Object}\n     */\n    static get defaultOptions() {\n      return {}\n    }\n\n    constructor(options = {}) {\n      this.options = $.extend(true, {}, this.constructor.defaultOptions, options);\n      this._listeners = {};\n      this.waits = [];\n\n      // Wait dom ready\n      this.wait(resolve => {\n        $(() => resolve());\n      });\n\n      // Ready\n      $(() => {\n        this.completed().then(() => this.trigger('loaded'));\n      });\n    }\n\n    use(plugin) {\n      if (Array.isArray(plugin)) {\n        plugin.forEach(p => this.use(p));\n        return this;\n      }\n\n      if (plugin.is === undefined) {\n        throw new Error(`Plugin: ${plugin.name} must instance of : ${PhoenixPlugin.name}`);\n      }\n\n      const instance = plugin.install(this);\n      instance.boot(this);\n\n      this.trigger('plugin.installed', instance);\n\n      return this;\n    }\n\n    detach(plugin) {\n      if (!plugin instanceof PhoenixPlugin) {\n        throw new Error('Plugin must instance of : ' + PhoenixPlugin.name);\n      }\n\n      plugin.uninstall(this);\n\n      this.trigger('plugin.uninstalled', plugin);\n\n      return this;\n    }\n\n    on(event, handler) {\n      if (Array.isArray(event)) {\n        event.forEach(e => this.on(e, handler));\n        return this;\n      }\n\n      if (this._listeners[event] === undefined) {\n        this._listeners[event] = [];\n      }\n\n      this._listeners[event].push(handler);\n\n      return this;\n    }\n\n    once(event, handler) {\n      if (Array.isArray(event)) {\n        event.forEach(e => this.once(e, handler));\n        return this;\n      }\n\n      handler._once = true;\n\n      this.on(event, handler);\n    }\n\n    off(event, callback = null) {\n      if (callback !== null) {\n        this._listeners[event] = this.listeners(event).filter((listener) => listener !== callback);\n        return this;\n      }\n\n      delete this._listeners[event];\n\n      return this;\n    }\n\n    trigger(event, ...args) {\n      if (Array.isArray(event)) {\n        event.forEach(e => this.trigger(e));\n        return this;\n      }\n\n      this.listeners(event).forEach(listener => {\n        listener(...args);\n      });\n\n      // Remove once\n      this._listeners[event] = this.listeners(event).filter((listener) => listener._once !== true);\n\n      if (this.data('windwalker.debug')) {\n        console.debug(`[Phoenix Event] ${event}`, args, this.listeners(event));\n      }\n\n      return this;\n    }\n\n    listeners(event) {\n      if (typeof event !== 'string') {\n        throw new Error(`get listeners event name should only use string.`);\n      }\n\n      return this._listeners[event] === undefined ? [] : this._listeners[event];\n    }\n\n    data(name, value) {\n      if (value === undefined) {\n        return $(document).data(name);\n      }\n\n      $(document).data(name, value);\n\n      return this;\n    }\n\n    removeData(name) {\n      $(document).removeData(name);\n\n      return this;\n    }\n\n    uri(type) {\n      return this.data('phoenix.uri')[type];\n    }\n\n    asset(type) {\n      return this.uri('asset')[type];\n    }\n\n    wait(callback) {\n      const d = $.Deferred();\n\n      this.waits.push(d);\n\n      callback(() => d.resolve());\n\n      return d;\n    }\n\n    completed() {\n      const promise = $.when(...this.waits);\n\n      this.waits = [];\n\n      return promise;\n    }\n\n    plugin(name, plugin) {\n      const self = this;\n      $.fn[name] = function (...args) {\n        if (!this.data('phoenix.' + name)) {\n          const instance = new plugin(this, ...args);\n          this.data('phoenix.' + name, instance);\n          self.trigger('jquery.plugin.created', {name: name, ele: this, instance: instance});\n        }\n\n        const instance = this.data('phoenix.' + name);\n\n        self.trigger('jquery.plugin.get', {name: name, ele: this, instance: instance});\n\n        return instance;\n      };\n\n      return this;\n    }\n  }\n\n  window.PhoenixCore = PhoenixCore;\n})(jQuery);\n","/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\n($ => {\n  class PhoenixPlugin {\n    static get is() {\n      throw new Error('Please add \"is\" property to Phoenix Plugin: ' + this.name);\n    }\n\n    static get proxies() {\n      return {};\n    }\n\n    static get defaultOptions() {\n      return {}\n    }\n\n    get options() {\n      return this.phoenix.options[this.constructor.is.toLowerCase()];\n    }\n\n    static install(phoenix) {\n      const self = new this;\n\n      this.createProxies(phoenix, self);\n      return self;\n    }\n\n    static uninstall(phoenix) {\n      const self = new this(phoenix);\n\n      this.resetProxies(phoenix, self);\n    }\n\n    constructor() {\n      //\n    }\n\n    boot(phoenix) {\n      this.phoenix = phoenix;\n\n      const name = this.constructor.is.toLowerCase();\n\n      // Merge to global options\n      this.phoenix.options[name] = $.extend(\n        true,\n        {},\n        this.constructor.defaultOptions,\n        this.phoenix.options[name]\n      );\n\n      // Created hook\n      this.created();\n\n      // DOM Ready hook\n      $(() => this.ready());\n\n      // Phoenix onload hook\n      this.phoenix.on('loaded', this.loaded);\n    }\n\n    created() {\n      //\n    }\n\n    ready() {\n      //\n    }\n\n    loaded() {\n      //\n    }\n\n    static createProxies(phoenix, plugin) {\n      if (plugin.constructor.proxies === undefined) {\n        return this;\n      }\n\n      this.resetProxies(phoenix, plugin);\n\n      phoenix[plugin.constructor.is] = plugin;\n\n      const proxies = plugin.constructor.proxies;\n\n      for (let name in proxies) {\n        if (!proxies.hasOwnProperty(name)) {\n          continue;\n        }\n\n        const origin = proxies[name];\n\n        if (phoenix[name] !== undefined) {\n          throw new Error(`Property: ${name} has exists in Phoenix instance.`);\n        }\n\n        if (typeof origin === 'function') {\n          phoenix[name] = origin;\n        } else if (plugin[origin] !== undefined) {\n          if (typeof plugin[origin] === 'function') {\n            phoenix[name] = function (...args) {\n              return plugin[origin](...args);\n            };\n          } else {\n            Object.defineProperties(phoenix, name, {\n              get: () => plugin[origin],\n              set: value => {\n                plugin[origin] = value;\n              }\n            });\n          }\n        } else {\n          throw new Error(`Proxy property: \"${origin}\" not found in Plugin: ${plugin.constructor.name}`);\n        }\n      }\n    }\n\n    static resetProxies(phoenix, plugin) {\n      const name = typeof plugin === 'string' ? plugin : plugin.constructor.is;\n\n      if (phoenix[name]) {\n        plugin = phoenix[name];\n      }\n\n      if (plugin.constructor.proxies === undefined) {\n        return;\n      }\n\n      for (let name in plugin.constructor.proxies) {\n        delete phoenix[name];\n      }\n\n      delete phoenix[plugin.constructor.is];\n    }\n  }\n\n  class PhoenixJQueryPlugin extends PhoenixPlugin {\n    /**\n     * Plugin name.\n     * @returns {string|null}\n     */\n    static get pluginName() {\n      throw new Error('Please provide a plugin name.');\n    }\n\n    static get pluginClass() {\n      throw new Error('Please provide a class as plugin instance.');\n    }\n\n    static install(phoenix) {\n      const instance = super.install(phoenix);\n\n      phoenix.plugin(this.pluginName, this.pluginClass);\n\n      return instance;\n    }\n\n    createPlugin(selector, options = {}, ...args) {\n      options.mainSelector = selector;\n\n      return $(selector)[this.constructor.pluginName](options, this.phoenix, ...args);\n    }\n  }\n\n  window.PhoenixPlugin = PhoenixPlugin;\n  window.PhoenixJQueryPlugin = PhoenixJQueryPlugin;\n})(jQuery);\n","/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\n(($) => {\n  class PhoenixHelper extends PhoenixPlugin {\n    static get is() { return 'Helper'; }\n\n    static get proxies() {\n      return {\n        isDebug: 'isDebug',\n        confirm: 'confirm',\n        keepAlive: 'keepAlive',\n        stopKeepAlive: 'stopKeepAlive',\n        loadScript: 'loadScript',\n        notify: 'notify',\n        numberFormat: 'numberFormat',\n        sprintf: 'sprintf',\n        vsprintf: 'vsprintf',\n      };\n    }\n\n    static get defaultOptions() {\n      return {}\n    }\n\n    constructor() {\n      super();\n\n      this.aliveHandle = null;\n    }\n\n    isDebug() {\n      return this.phoenix.data('windwalker.debug');\n    }\n\n    /**\n     * Confirm popup.\n     *\n     * @param {string}   message\n     * @param {Function} callback\n     * @param {Function} falseCallback\n     */\n    confirm(message, callback, falseCallback = null) {\n      message = message || 'Are you sure?';\n\n      const d = $.Deferred();\n      const when = $.when(d);\n\n      if (callback) {\n        when.done(callback);\n      }\n\n      if (falseCallback) {\n        when.catch(callback);\n      }\n\n      const confirmed = confirm(message);\n\n      if (confirmed) {\n        d.resolve(confirmed);\n      } else {\n        d.reject(confirmed);\n      }\n\n      return when;\n    }\n\n    loadScript(urls, autoConvert = true) {\n      if (typeof urls === 'string') {\n        urls = [urls];\n      }\n\n      const promises = [];\n      const data = {};\n      const endsWith = (str, suffix) => str.indexOf(suffix, str.length - suffix.length) >= 0;\n      data[this.phoenix.asset('version')] = '1';\n\n      urls.forEach(url => {\n        const ext = url.split('.').pop();\n        let loadUri = url;\n\n        if (autoConvert) {\n          let assetFile, assetMinFile;\n\n          if (endsWith(url, '.min.' + ext)) {\n            assetMinFile = url;\n            assetFile = url.slice(0, -`.min.${ext}`.length) + '.' + ext;\n          } else {\n            assetFile = url;\n            assetMinFile = url.slice(0, -`.${ext}`.length) + '.min.' + ext;\n          }\n\n          loadUri = this.phoenix.data('windwalker.debug') ? assetFile : assetMinFile;\n        }\n\n        promises.push(\n          $.getScript({\n            url: this.addUriBase(loadUri),\n            cache: true,\n            data\n          })\n        );\n      });\n\n      return $.when(...promises);\n    }\n\n    addUriBase(uri, type = 'path') {\n      if (uri.substr(0, 2) === '//' || uri.substr(0, 4) === 'http') {\n        return uri;\n      }\n\n      return this.phoenix.asset(type) + '/' + uri;\n    }\n\n    /**\n     * Notify information.\n     * @param {string|Array} message\n     * @param {string}       type\n     * @returns {*}\n     */\n    notify(message, type = 'info') {\n      return this.phoenix.addMessage(message, type);\n    }\n\n    /**\n     * Keep alive.\n     *\n     * @param {string} url\n     * @param {Number} time\n     *\n     * @return {number}\n     */\n    keepAlive(url, time) {\n      return this.aliveHandle = window.setInterval(() => $.get('/'), time);\n    }\n\n    /**\n     * Stop keep alive\n     */\n    stopKeepAlive() {\n      clearInterval(this.aliveHandle);\n    }\n\n    /**\n     * Number format like php function.\n     *\n     * @param {string|number} number\n     * @param {number}        decimals\n     * @param {string}        decPoint\n     * @param {string}        thousandsSep\n     * @returns {string}\n     */\n    numberFormat(number, decimals = 0, decPoint = '.', thousandsSep = ',') {\n      decimals = decimals || 0;\n      number = parseFloat(number);\n\n      let roundedNumber = Math.round(Math.abs(number) * ('1e' + decimals)) + '';\n      let numbersString = decimals ? roundedNumber.slice(0, decimals * -1) : roundedNumber;\n      let decimalsString = decimals ? roundedNumber.slice(decimals * -1) : '';\n      let formattedNumber = \"\";\n\n      while (numbersString.length > 3) {\n        formattedNumber += thousandsSep + numbersString.slice(-3);\n        numbersString = numbersString.slice(0, -3);\n      }\n\n      return (number < 0 ? '-' : '') + numbersString + formattedNumber + (decimalsString ? (decPoint + decimalsString) : '');\n    }\n  }\n\n  window.PhoenixHelper = PhoenixHelper;\n\n  // Fork sprintf here to reduce requests\n  (function() {\n    var re = {\n      not_string: /[^s]/,\n      not_bool: /[^t]/,\n      not_type: /[^T]/,\n      not_primitive: /[^v]/,\n      number: /[diefg]/,\n      numeric_arg: /[bcdiefguxX]/,\n      json: /[j]/,\n      not_json: /[^j]/,\n      text: /^[^\\x25]+/,\n      modulo: /^\\x25{2}/,\n      placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n      key: /^([a-z_][a-z_\\d]*)/i,\n      key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n      index_access: /^\\[(\\d+)\\]/,\n      sign: /^[\\+\\-]/\n    }\n\n    function sprintf(key) {\n      // `arguments` is not an array, but should be fine for this call\n      return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n      return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n      var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, match, pad, pad_character, pad_length, is_positive, sign\n      for (i = 0; i < tree_length; i++) {\n        if (typeof parse_tree[i] === 'string') {\n          output += parse_tree[i]\n        }\n        else if (Array.isArray(parse_tree[i])) {\n          match = parse_tree[i] // convenience purposes only\n          if (match[2]) { // keyword argument\n            arg = argv[cursor]\n            for (k = 0; k < match[2].length; k++) {\n              if (!arg.hasOwnProperty(match[2][k])) {\n                throw new Error(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]))\n              }\n              arg = arg[match[2][k]]\n            }\n          }\n          else if (match[1]) { // positional argument (explicit)\n            arg = argv[match[1]]\n          }\n          else { // positional argument (implicit)\n            arg = argv[cursor++]\n          }\n\n          if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && arg instanceof Function) {\n            arg = arg()\n          }\n\n          if (re.numeric_arg.test(match[8]) && (typeof arg !== 'number' && isNaN(arg))) {\n            throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n          }\n\n          if (re.number.test(match[8])) {\n            is_positive = arg >= 0\n          }\n\n          switch (match[8]) {\n            case 'b':\n              arg = parseInt(arg, 10).toString(2)\n              break\n            case 'c':\n              arg = String.fromCharCode(parseInt(arg, 10))\n              break\n            case 'd':\n            case 'i':\n              arg = parseInt(arg, 10)\n              break\n            case 'j':\n              arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\n              break\n            case 'e':\n              arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential()\n              break\n            case 'f':\n              arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\n              break\n            case 'g':\n              arg = match[7] ? String(Number(arg.toPrecision(match[7]))) : parseFloat(arg)\n              break\n            case 'o':\n              arg = (parseInt(arg, 10) >>> 0).toString(8)\n              break\n            case 's':\n              arg = String(arg)\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\n              break\n            case 't':\n              arg = String(!!arg)\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\n              break\n            case 'T':\n              arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\n              break\n            case 'u':\n              arg = parseInt(arg, 10) >>> 0\n              break\n            case 'v':\n              arg = arg.valueOf()\n              arg = (match[7] ? arg.substring(0, match[7]) : arg)\n              break\n            case 'x':\n              arg = (parseInt(arg, 10) >>> 0).toString(16)\n              break\n            case 'X':\n              arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n              break\n          }\n          if (re.json.test(match[8])) {\n            output += arg\n          }\n          else {\n            if (re.number.test(match[8]) && (!is_positive || match[3])) {\n              sign = is_positive ? '+' : '-'\n              arg = arg.toString().replace(re.sign, '')\n            }\n            else {\n              sign = ''\n            }\n            pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' '\n            pad_length = match[6] - (sign + arg).length\n            pad = match[6] ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n            output += match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n          }\n        }\n      }\n      return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n      if (sprintf_cache[fmt]) {\n        return sprintf_cache[fmt]\n      }\n\n      var _fmt = fmt, match, parse_tree = [], arg_names = 0\n      while (_fmt) {\n        if ((match = re.text.exec(_fmt)) !== null) {\n          parse_tree.push(match[0])\n        }\n        else if ((match = re.modulo.exec(_fmt)) !== null) {\n          parse_tree.push('%')\n        }\n        else if ((match = re.placeholder.exec(_fmt)) !== null) {\n          if (match[2]) {\n            arg_names |= 1\n            var field_list = [], replacement_field = match[2], field_match = []\n            if ((field_match = re.key.exec(replacement_field)) !== null) {\n              field_list.push(field_match[1])\n              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                  field_list.push(field_match[1])\n                }\n                else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                  field_list.push(field_match[1])\n                }\n                else {\n                  throw new SyntaxError('[sprintf] failed to parse named argument key')\n                }\n              }\n            }\n            else {\n              throw new SyntaxError('[sprintf] failed to parse named argument key')\n            }\n            match[2] = field_list\n          }\n          else {\n            arg_names |= 2\n          }\n          if (arg_names === 3) {\n            throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n          }\n          parse_tree.push(match)\n        }\n        else {\n          throw new SyntaxError('[sprintf] unexpected placeholder')\n        }\n\n        _fmt = _fmt.substring(match[0].length)\n      }\n      return sprintf_cache[fmt] = parse_tree\n    }\n\n    // Push to class\n    PhoenixHelper.prototype.sprintf = sprintf;\n    PhoenixHelper.prototype.vsprintf = vsprintf;\n\n  })(PhoenixHelper);\n})(jQuery);\n","/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\n(($) => {\n  class PhoenixUI extends PhoenixPlugin {\n    static get is() { return 'UI'; }\n\n    static get defaultOptions() {\n      return {\n        messageSelector: '.message-wrap'\n      };\n    }\n\n    static get proxies() {\n      return {\n        addMessage: 'renderMessage'\n      };\n    }\n\n    constructor() {\n      super();\n\n      this.aliveHandle = null;\n    }\n\n    ready() {\n      super.ready();\n\n      this.messageContainer = $(this.options.messageSelector);\n\n      this.phoenix.on('validation.response', event => {\n        this.showValidateResponse(event.validation, event.state, event.$input, event.help);\n      });\n\n      this.phoenix.on('validation.remove', event => {\n        this.removeValidateResponse(event.$element);\n      });\n    }\n\n    /**\n     * Show Validation response.\n     *\n     * @param {PhoenixValidation} validation\n     * @param {string}            state\n     * @param {jQuery}            $input\n     * @param {string}            help\n     */\n    showValidateResponse(validation, state, $input, help) {\n      throw new Error('Please implement this method.');\n    }\n\n    /**\n     * Add validate effect to input, just override this method to fit other templates.\n     *\n     * @param {jQuery} $control\n     * @param {jQuery} $input\n     * @param {string} icon\n     * @param {string} type\n     * @param {string} help\n     */\n    addValidateResponse($control, $input, icon, type, help) {\n      throw new Error('Please implement this method.');\n    }\n\n    /**\n     * Remove validation response.\n     *\n     * @param {jQuery} $element\n     */\n    removeValidateResponse($element) {\n      throw new Error('Please implement this method.');\n    }\n\n    /**\n     * Render message.\n     *\n     * @param {string|Array} msg\n     * @param {string}       type\n     */\n    renderMessage(msg, type) {\n      throw new Error('Please implement this method.');\n    }\n\n    /**\n     * Remove all messages.\n     */\n    removeMessages() {\n      this.messageContainer.children().each(function() {\n        this.remove();\n      });\n    }\n\n    /**\n     * Toggle filter bar.\n     *\n     * @param {jQuery} container\n     * @param {jQuery} button\n     */\n    toggleFilter(container, button) {\n      const showClass = button.attr('data-class-show') || 'btn-primary';\n      const hideClass = button.attr('data-class-hide') || 'btn-default';\n\n      const icon = button.find('span.filter-button-icon');\n      const iconShowClass = icon.attr('data-class-show') || 'fa fa-angle-up';\n      const iconHideClass = icon.attr('data-class-hide') || 'fa fa-angle-down';\n\n      if (container.hasClass('shown')) {\n        button.removeClass(showClass).addClass(hideClass);\n        container.hide('fast');\n        container.removeClass('shown');\n\n        icon.removeClass(iconShowClass).addClass(iconHideClass);\n      } else {\n        button.removeClass(hideClass).addClass(showClass);\n        container.show('fast');\n        container.addClass('shown');\n\n        icon.removeClass(iconHideClass).addClass(iconShowClass);\n      }\n    }\n\n    /**\n     * Confirm popup.\n     *\n     * TODO: Move to core.\n     *\n     * @param {string}   message\n     * @param {Function} callback\n     */\n    confirm(message, callback) {\n      message = message || 'Are you sure?';\n\n      const confirmed = confirm(message);\n\n      callback(confirmed);\n\n      return confirmed;\n    }\n\n    /**\n     * Keep alive.\n     *\n     * @param {string} url\n     * @param {Number} time\n     *\n     * @return {number}\n     */\n    keepAlive(url, time) {\n      return this.aliveHandle = window.setInterval(() => $.get('/'), time);\n    }\n\n    stopKeepAlive() {\n      clearInterval(this.aliveHandle);\n    }\n  }\n\n  window.PhoenixUI = PhoenixUI;\n})(jQuery);\n","/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n/**\n * Phoenix.Router\n */\n(($) => {\n  \"use strict\";\n\n  class PhoenixRouter extends PhoenixPlugin {\n    static get is() { return 'Router' }\n\n    static get proxies() {\n      return {\n        addRoute: 'add',\n        route: 'route'\n      };\n    }\n\n    ready() {\n      $(window).on('popstate', (e) => this.phoenix.on('router.popstate', e));\n    }\n\n    /**\n     * Add a route.\n     *\n     * @param route\n     * @param url\n     *\n     * @returns {PhoenixRouter}\n     */\n    add(route, url) {\n      const data = {};\n      data[route] = url;\n\n      this.phoenix.data('phoenix.routes', data);\n\n      return this;\n    }\n\n    /**\n     * Get route.\n     *\n     * @param route\n     * @param query\n     * @returns {String|PhoenixRouter}\n     */\n    route(route, query = null) {\n      let url = this.phoenix.data('phoenix.routes')[route];\n\n      if (url === undefined) {\n        throw new Error('Route: \"' + route + '\" not found');\n      }\n\n      return this.addQuery(url, query);\n    }\n\n    has(route) {\n      return undefined !== this.phoenix.data('phoenix.routes')[route];\n    }\n\n    addQuery(url, query = null) {\n      if (query === null) {\n        return url;\n      }\n\n      query = $.param(query);\n\n      return url + (/\\?/.test(url) ? '&' + query : '?' + query);\n    }\n\n    push(data) {\n      if (typeof data === 'string') {\n        data = {uri: data};\n      }\n\n      window.history.pushState(\n        data.state || null,\n        data.title || null,\n        data.uri || this.route(data.route, data.params)\n      );\n\n      return this;\n    }\n\n    replace(data) {\n      if (typeof data === 'string') {\n        data = {uri: data};\n      }\n\n      window.history.replaceState(\n        data.state || null,\n        data.title || null,\n        data.uri || this.route(data.route, data.params)\n      );\n\n      return this;\n    }\n\n    state() {\n      return window.history.state;\n    }\n\n    back() {\n      window.history.back();\n    }\n\n    forward() {\n      window.history.forward();\n    }\n\n    go(num) {\n      window.history.go(num);\n    }\n  }\n\n  window.PhoenixRouter = PhoenixRouter;\n})(jQuery);\n","/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n(function($) {\n  \"use strict\";\n\n  class PhoenixAjax extends PhoenixPlugin {\n    static get is() { return 'Ajax' }\n\n    static get proxies() {\n      return {};\n    }\n\n    static get defaultOptions() {\n      return {}\n    }\n\n    constructor() {\n      super();\n\n      this.$ = $;\n\n      this.config = {\n        customMethod: false\n      };\n      \n      this.data = {};\n      \n      this.headers = {\n        GET: {},\n        POST: {},\n        PUT: {},\n        PATCH: {},\n        DELETE: {},\n        HEAD: {},\n        OPTIONS: {},\n        _global: {}\n      }\n    }\n\n    ready() {\n      super.ready();\n\n      this.headers._global['X-CSRF-Token'] = this.phoenix.data('csrf-token');\n    }\n\n    /**\n     * Send a GET request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    get(url, data, headers, options) {\n      return this.request('GET', url, data, headers, options);\n    }\n\n    /**\n     * Send a POST request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    post(url, data, headers, options) {\n      return this.request('POST', url, data, headers, options);\n    }\n\n    /**\n     * Send a PUT request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    put(url, data, headers, options) {\n      return this.request('PUT', url, data, headers, options);\n    }\n\n    /**\n     * Send a PATCH request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    patch(url, data, headers, options) {\n      return this.request('PATCH', url, data, headers, options);\n    }\n\n    /**\n     * Send a DELETE request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    sendDelete(url, data, headers, options) {\n      return this['delete'](url, data, headers, options);\n    }\n\n    /**\n     * Send a DELETE request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    'delete'(url, data, headers, options) {\n      return this.request('DELETE', url, data, headers, options);\n    }\n\n    /**\n     * Send a HEAD request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    head(url, data, headers, options) {\n      return this.request('HEAD', url, data, headers, options);\n    }\n\n    /**\n     * Send a OPTIONS request.\n     *\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    options(url, data, headers, options) {\n      return this.request('OPTIONS', url, data, headers, options);\n    }\n\n    /**\n     * Send request.\n     *\n     * @param {string} method\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    sendRequest(method, url, data, headers, options) {\n      return this.request(method, url, data, headers, options);\n    }\n\n    /**\n     * Send request.\n     *\n     * @param {string} method\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @param {Object} options\n     *\n     * @returns {jqXHR}\n     */\n    request(method, url = '', data = {}, headers = {}, options = {}) {\n      if (typeof url === 'object') {\n        options = url;\n        url = options.url;\n      }\n\n      const isFormData = data instanceof FormData;\n\n      if (isFormData) {\n        options.processData = false;\n        options.contentType = false;\n      }\n\n      if (typeof options.dataType === 'undefined') {\n        options.dataType = 'json';\n      }\n\n      options.data = typeof data === 'string' || isFormData\n        ? data\n        : $.extend(true, {}, this.data, options.data, data);\n\n      options.type = method.toUpperCase() || 'GET';\n      const type = options.type;\n\n      if (['POST', 'GET'].indexOf(options.type) === -1 && this.config.customMethod) {\n        headers['X-HTTP-Method-Override'] = options.type;\n        options.data._method = options.type;\n        options.type = 'POST';\n      }\n\n      options.headers = $.extend(true, {}, this.headers._global, this.headers[type], options.headers, headers);\n\n      return this.$.ajax(url, options)\n        .fail((xhr, error) => {\n          if (error === 'parsererror') {\n            xhr.statusText = 'Unable to parse data.';\n          }\n        });\n    }\n\n    /**\n     * Set custom method with _method parameter.\n     *\n     * This method will return a clone of this object to help us send request once.\n     *\n     * @returns {Ajax}\n     */\n    customMethod() {\n      var clone = $.extend(true, {}, this);\n\n      clone.config.customMethod = true;\n\n      return clone;\n    }\n  }\n\n  window.PhoenixAjax = PhoenixAjax;\n\n})(jQuery);\n","/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n/**\n * PhoenixCrypto\n */\n(function() {\n  \"use strict\";\n\n  let globalSerial = 1;\n\n  class PhoenixCrypto extends PhoenixPlugin {\n    static get is() { return 'Crypto' }\n\n    static get proxies() {\n      return {\n        base64Encode: 'base64Encode',\n        base64Decode: 'base64Decode',\n        encrypt: 'encrypt',\n        decrypt: 'decrypt',\n        uuid4: 'uuid4',\n        md5: 'md5',\n        uniqid: 'uniqid'\n      };\n    }\n\n    static get defaultOptions() {\n      return {}\n    }\n\n    /**\n     * Base64 encode.\n     *\n     * @param {string} string\n     *\n     * @returns {string}\n     */\n    base64Encode(string) {\n      return btoa(string);\n    }\n\n    /**\n     * Base64 decode.\n     *\n     * @param {string} string\n     *\n     * @returns {string}\n     */\n    base64Decode(string) {\n      return atob(string);\n    }\n\n    /**\n     * XOR Cipher encrypt.\n     *\n     * @param {string} key\n     * @param {string} data\n     */\n    encrypt(key, data) {\n      const code = data.split('').map((c, i) => c.charCodeAt(0) ^ this.keyCharAt(key, i)).join(',');\n\n      return this.base64Encode(code);\n    }\n\n    /**\n     * XOR Cipher decrypt.\n     *\n     * @param {string} key\n     * @param {string} data\n     *\n     * @returns {string}\n     */\n    decrypt(key, data) {\n      data = this.base64Decode(data);\n\n      data = data.split(',');\n\n      return data.map((c, i) => String.fromCharCode(c ^ this.keyCharAt(key, i))).join(\"\");\n    }\n\n    /**\n     * Key char at.\n     *\n     * @param {string} key\n     * @param {Number} i\n     *\n     * @returns {Number}\n     */\n    keyCharAt(key, i) {\n      return key.charCodeAt(Math.floor(i % key.length));\n    }\n\n    /**\n     * UUID v4\n     *\n     * @see  https://gist.github.com/jed/982883\n     *\n     * @returns {string}\n     */\n    uuid4() {\n      return (function b(a) {\n        return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b)\n      })();\n    }\n\n    /**\n     * Get uniqid like php's unidid().\n     *\n     * @see http://locutus.io/php/misc/uniqid/\n     *\n     * @param {string}  prefix\n     * @param {boolean} moreEntropy\n     * @returns {*}\n     */\n    uniqid (prefix = '', moreEntropy = false) {\n      let retId;\n      const _formatSeed = function (seed, reqWidth) {\n        seed = parseInt(seed, 10).toString(16); // to hex str\n        if (reqWidth < seed.length) {\n          // so long we split\n          return seed.slice(seed.length - reqWidth)\n        }\n        if (reqWidth > seed.length) {\n          // so short we pad\n          return Array(1 + (reqWidth - seed.length)).join('0') + seed\n        }\n        return seed\n      };\n\n      const $global = (typeof window !== 'undefined' ? window : global);\n      $global.$locutus = $global.$locutus || {};\n      const $locutus = $global.$locutus;\n      $locutus.php = $locutus.php || {};\n\n      if (!$locutus.php.uniqidSeed) {\n        // init seed with big random int\n        $locutus.php.uniqidSeed = Math.floor(Math.random() * 0x75bcd15)\n      }\n\n      $locutus.php.uniqidSeed++;\n\n      // start with prefix, add current milliseconds hex string\n      retId = prefix;\n      retId += _formatSeed(parseInt(new Date().getTime() / 1000, 10), 8);\n      // add seed hex string\n      retId += _formatSeed($locutus.php.uniqidSeed, 5);\n\n      if (moreEntropy) {\n        // for more entropy we add a float lower to 10\n        retId += (Math.random() * 10).toFixed(8).toString()\n      }\n\n      return retId;\n    }\n\n    serial() {\n      return globalSerial++;\n    }\n  }\n\n  /**\n   * Javascript-MD5\n   *\n   * @link  https://github.com/blueimp/JavaScript-MD5\n   */\n  (function(Crypto) {\n    /*\n     * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n     * to work around bugs in some JS interpreters.\n     */\n    function safe_add(x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF)\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n      return (msw << 16) | (lsw & 0xFFFF)\n    }\n\n    /*\n     * Bitwise rotate a 32-bit number to the left.\n     */\n    function bit_rol(num, cnt) {\n      return (num << cnt) | (num >>> (32 - cnt))\n    }\n\n    /*\n     * These functions implement the four basic operations the algorithm uses.\n     */\n    function md5_cmn(q, a, b, x, s, t) {\n      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b)\n    }\n\n    function md5_ff(a, b, c, d, x, s, t) {\n      return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t)\n    }\n\n    function md5_gg(a, b, c, d, x, s, t) {\n      return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t)\n    }\n\n    function md5_hh(a, b, c, d, x, s, t) {\n      return md5_cmn(b ^ c ^ d, a, b, x, s, t)\n    }\n\n    function md5_ii(a, b, c, d, x, s, t) {\n      return md5_cmn(c ^ (b | (~d)), a, b, x, s, t)\n    }\n\n    /*\n     * Calculate the MD5 of an array of little-endian words, and a bit length.\n     */\n    function binl_md5(x, len) {\n      /* append padding */\n      x[len >> 5] |= 0x80 << (len % 32);\n      x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n      var i;\n      var olda;\n      var oldb;\n      var oldc;\n      var oldd;\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n\n      for (i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n\n        a = md5_ff(a, b, c, d, x[i], 7, -680876936);\n        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = md5_gg(b, c, d, a, x[i], 20, -373897302);\n        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = md5_hh(d, a, b, c, x[i], 11, -358537222);\n        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n        a = md5_ii(a, b, c, d, x[i], 6, -198630844);\n        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n      }\n      return [a, b, c, d]\n    }\n\n    /*\n     * Convert an array of little-endian words to a string\n     */\n    function binl2rstr(input) {\n      var i;\n      var output = '';\n      for (i = 0; i < input.length * 32; i += 8) {\n        output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF)\n      }\n      return output\n    }\n\n    /*\n     * Convert a raw string to an array of little-endian words\n     * Characters >255 have their high-byte silently ignored.\n     */\n    function rstr2binl(input) {\n      var i;\n      var output = [];\n      output[(input.length >> 2) - 1] = undefined;\n      for (i = 0; i < output.length; i += 1) {\n        output[i] = 0\n      }\n      for (i = 0; i < input.length * 8; i += 8) {\n        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32)\n      }\n      return output\n    }\n\n    /*\n     * Calculate the MD5 of a raw string\n     */\n    function rstr_md5(s) {\n      return binl2rstr(binl_md5(rstr2binl(s), s.length * 8))\n    }\n\n    /*\n     * Calculate the HMAC-MD5, of a key and some data (raw strings)\n     */\n    function rstr_hmac_md5(key, data) {\n      var i;\n      var bkey = rstr2binl(key);\n      var ipad = [];\n      var opad = [];\n      var hash;\n      ipad[15] = opad[15] = undefined;\n      if (bkey.length > 16) {\n        bkey = binl_md5(bkey, key.length * 8)\n      }\n      for (i = 0; i < 16; i += 1) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n      }\n      hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\n      return binl2rstr(binl_md5(opad.concat(hash), 512 + 128))\n    }\n\n    /*\n     * Convert a raw string to a hex string\n     */\n    function rstr2hex(input) {\n      var hex_tab = '0123456789abcdef';\n      var output = '';\n      var x;\n      var i;\n      for (i = 0; i < input.length; i += 1) {\n        x = input.charCodeAt(i);\n        output += hex_tab.charAt((x >>> 4) & 0x0F) +\n          hex_tab.charAt(x & 0x0F)\n      }\n      return output\n    }\n\n    /*\n     * Encode a string as utf-8\n     */\n    function str2rstr_utf8(input) {\n      return decodeURIComponent(encodeURIComponent(input))\n    }\n\n    /*\n     * Take string arguments and return either raw or hex encoded strings\n     */\n    function raw_md5(s) {\n      return rstr_md5(str2rstr_utf8(s))\n    }\n\n    function hex_md5(s) {\n      return rstr2hex(raw_md5(s))\n    }\n\n    function raw_hmac_md5(k, d) {\n      return rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))\n    }\n\n    function hex_hmac_md5(k, d) {\n      return rstr2hex(raw_hmac_md5(k, d))\n    }\n\n    function md5(string, key, raw) {\n      if (!key) {\n        if (!raw) {\n          return hex_md5(string)\n        }\n        return raw_md5(string)\n      }\n      if (!raw) {\n        return hex_hmac_md5(key, string)\n      }\n      return raw_hmac_md5(key, string)\n    }\n\n    if (typeof define === 'function' && define.amd) {\n      define(function() {\n        return md5\n      })\n    } else if (typeof module === 'object' && module.exports) {\n      module.exports = md5\n    }\n\n    PhoenixCrypto.prototype.md5 = md5;\n  })(PhoenixCrypto);\n\n  window.PhoenixCrypto = PhoenixCrypto;\n})();\n","/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n/**\n * Phoenix.Translator\n */\n(() => {\n  \"use strict\";\n\n  class PhoenixTranslator extends PhoenixPlugin {\n    static get is() { return 'Translator' }\n\n    static get proxies() {\n      return {\n        trans: 'translate',\n        __: 'translate',\n        addLanguage: 'addKey',\n      };\n    }\n\n    constructor() {\n      super();\n\n      this.keys = {};\n    }\n\n    /**\n     * Translate a string.\n     *\n     * @param {string} text\n     * @param {Array}  args\n     * @returns {string}\n     */\n    translate(text, ...args) {\n      const key = this.normalize(text);\n\n      if (args.length) {\n        return this.sprintf(text, ...args);\n      }\n\n      return this.find(key);\n    }\n\n    /**\n     * Sptintf language string.\n     * @param {string} text\n     * @param {Array} args\n     */\n    sprintf(text, ...args) {\n      return this.phoenix.vsprintf(this.find(text), args);\n    }\n\n    /**\n     * Find text.\n     * @param {string} key\n     * @returns {*}\n     */\n    find(key) {\n      const langs = this.phoenix.data('phoenix.languages');\n\n      if (langs[key]) {\n        return langs[key];\n      }\n\n      return key;\n    }\n\n    /**\n     * Has language key.\n     * @param {string} key\n     * @returns {boolean}\n     */\n    has(key) {\n      const langs = this.phoenix.data('phoenix.languages');\n\n      return langs[key] !== undefined;\n    }\n\n    /**\n     * Add language key.\n     *\n     * @param {string} key\n     * @param {string} value\n     *\n     * @return {PhoenixTranslator}\n     */\n    addKey(key, value) {\n      const data = {};\n      data[this.normalize(key)] = value;\n\n      this.phoenix.data('phoenix.languages', data);\n\n      return this;\n    }\n\n    /**\n     * Replace all symbols to dot(.).\n     *\n     * @param {string} text\n     *\n     * @return {string}\n     */\n     normalize(text) {\n      return text.replace(/[^A-Z0-9]+/ig, '.');\n    }\n  }\n\n  window.PhoenixTranslator = PhoenixTranslator;\n})();\n","/**\n * Part of phoenix project.\n *\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\n(() => {\n  let formInited = false;\n  let gridInited = false;\n\n  class PhoenixLegacy extends PhoenixPlugin {\n    static get is() {\n      return 'Legacy';\n    }\n\n    created() {\n      const phoenix = this.phoenix;\n\n      phoenix.Theme = phoenix.UI;\n\n      // Uri\n      phoenix.Uri = phoenix.data('phoenix.uri');\n\n      phoenix.on('jquery.plugin.created', event => {\n        const debug = this.phoenix.data('windwalker.debug');\n\n        // Legacy Form polyfill\n        if (!formInited && event.name === 'form') {\n          ['delete', 'get', 'patch', 'post', 'put', 'sendDelete', 'submit'].forEach((method) => {\n            phoenix[method] = (...args) => {\n              debug ? this.constructor.warn('Phoenix', method) : null;\n              return event.instance[method](...args);\n            }\n          });\n\n          formInited = true;\n        }\n\n        // Legacy Grid polyfill\n        if (!gridInited && event.name === 'grid') {\n          ['toggleFilter', 'sort', 'checkRow', 'updateRow', 'doTask', 'batch', 'copyRow', 'deleteList', 'deleteRow',\n            'toggleAll', 'countChecked', 'getChecked', 'hasChecked', 'reorderAll', 'reorder']\n            .forEach((method) => {\n              phoenix.Grid[method] = (...args) => {\n                debug ? this.constructor.warn('Phoenix.Grid', method) : null;\n                return event.instance[method](...args);\n              }\n            });\n\n          gridInited = true;\n        }\n      });\n    }\n\n    ready() {\n      super.ready();\n    }\n\n    static warn(obj, method) {\n      console.warn(`Calling ${obj}.${method}() is deprecated.`);\n    }\n  }\n\n  window.PhoenixLegacy = PhoenixLegacy;\n})();\n"]}