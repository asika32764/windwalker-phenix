{"version":3,"sources":["grid.js"],"names":["$","PhoenixGrid","grid","PhoenixGridElement","PhoenixJQueryPlugin","mainSelector","selector","search","container","button","clearButton","filter","sort","element","options","phoenix","form","extend","constructor","defaultOptions","core","ui","UI","Error","searchContainer","find","searchClearButton","filterContainer","filterButton","sortButtons","registerEvents","click","val","submit","event","toggleFilter","stopPropagation","preventDefault","self","currentTarget","ordering","direction","orderingInput","length","append","directionInput","put","row","value","ch","checked","url","queries","toggleAll","checkRow","patch","task","updateRow","post","message","__","confirm","isConfirm","msg","deleteList","duration","checkboxes","each","i","e","setTimeout","getChecked","result","push","Phoenix","Translator","translate","countChecked","alert","origin","originOrdering","split","inputs","$this","attr","tr","parents","group","siblings","prop","batch","delta","doTask","window","jQuery"],"mappings":"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","sourcesContent":["/**\n * Part of Phoenix project.\n *\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\n * @license    GNU General Public License version 2 or later.\n */\n\n/**\n * PhoenixGrid\n */\n;(function($) {\n  \"use strict\";\n\n  class PhoenixGrid extends PhoenixJQueryPlugin {\n    static get is() { return 'Grid'; }\n\n    static get proxies() {\n      return {\n        grid: 'createPlugin'\n      };\n    }\n\n    /**\n     * Plugin name.\n     * @returns {string}\n     */\n    static get pluginName() { return 'grid' }\n\n    static get pluginClass() { return PhoenixGridElement };\n\n    /**\n     * Default options.\n     * @returns {Object}\n     */\n    static get defaultOptions() { \n      return {};\n    }\n  }\n  \n  class PhoenixGridElement {\n    static get defaultOptions() {\n      return {\n        mainSelector: '',\n        selector: {\n          search: {\n            container: '.search-container',\n            button: '.search-button',\n            clearButton: '.search-clear-button'\n          },\n          filter: {\n            container: '.filter-container',\n            button: '.filter-toggle-button'\n          },\n          sort: {\n            button: 'a[data-sort-button]'\n          }\n        }\n      }\n    }\n\n    constructor(element, options, phoenix) {\n      this.form = element;\n      this.options = $.extend(true, {}, this.constructor.defaultOptions, options);\n      this.phoenix = phoenix;\n      this.core = phoenix.form(options.mainSelector);\n      this.ui = phoenix.UI;\n\n      if (!this.core) {\n        throw new Error('PhoenixGrid is dependent on PhoenixForm');\n      }\n\n      if (!this.ui) {\n        throw new Error('PhoenixGrid is dependent on PhoenixUI');\n      }\n\n      const selector = this.options.selector;\n\n      this.searchContainer = this.form.find(selector.search.container);\n      //this.searchButton = this.form.find(selector.search.button);\n      this.searchClearButton = this.form.find(selector.search.clearButton);\n      this.filterContainer = this.form.find(selector.filter.container);\n      this.filterButton = this.form.find(selector.filter.button);\n      this.sortButtons = this.form.find(selector.sort.button);\n\n      this.registerEvents();\n    }\n\n    /**\n     * Start this object and events.\n     */\n    registerEvents() {\n      this.searchClearButton.click(() => {\n        this.searchContainer.find('input, textarea, select').val('');\n        this.filterContainer.find('input, textarea, select').val('');\n\n        this.form.submit();\n      });\n\n      this.filterButton.click(event => {\n        this.toggleFilter();\n        event.stopPropagation();\n        event.preventDefault();\n      });\n\n      this.sortButtons.click(event => {\n        self.sort(event.currentTarget, event);\n      });\n    }\n\n    /**\n     * Toggle filter bar.\n     *\n     * @returns {PhoenixGridElement}\n     */\n    toggleFilter() {\n      this.ui.toggleFilter(this.filterContainer, this.filterButton);\n\n      return this;\n    }\n\n    /**\n     * Sort two items.\n     *\n     * @param {string} ordering\n     * @param {string} direction\n     *\n     * @returns {boolean}\n     */\n    sort(ordering, direction) {\n      let orderingInput = this.form.find('input[name=list_ordering]');\n\n      if (!orderingInput.length) {\n        orderingInput = $('<input name=\"list_ordering\" type=\"hidden\" value=\"\" />');\n\n        this.form.append(orderingInput);\n      }\n\n      let directionInput = this.form.find('input[name=list_direction]');\n\n      if (!directionInput.length) {\n        directionInput = $('<input name=\"list_direction\" type=\"hidden\" value=\"\">');\n\n        this.form.append(directionInput);\n      }\n\n      orderingInput.val(ordering);\n      directionInput.val(direction);\n\n      return this.core.put();\n    }\n\n    /**\n     * Check a row's checkbox.\n     *\n     * @param {number}  row\n     * @param {boolean} value\n     */\n    checkRow(row, value = true) {\n      const ch = this.form.find('input.grid-checkbox[data-row-number=' + row + ']');\n\n      if (!ch.length) {\n        throw new Error('Checkbox of row: ' + row + ' not found.');\n      }\n\n      ch[0].checked = value;\n    }\n\n    /**\n     * Update a row.\n     *\n     * @param  {number} row\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    updateRow(row, url, queries) {\n      this.toggleAll(false);\n\n      this.checkRow(row);\n\n      return this.core.patch(url, queries);\n    }\n\n    /**\n     * Update a row with batch task.\n     *\n     * @param  {string} task\n     * @param  {number} row\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    doTask(task, row, url, queries) {\n      queries = queries || {};\n\n      queries.task = task;\n\n      return this.updateRow(row, url, queries);\n    }\n\n    /**\n     * Batch update items.\n     *\n     * @param  {string} task\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    batch(task, url, queries) {\n      queries = queries || {};\n\n      queries.task = task;\n\n      return this.core.patch(url, queries);\n    }\n\n    /**\n     * Copy a row.\n     *\n     * @param  {number} row\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    copyRow(row, url, queries) {\n      this.toggleAll(false);\n\n      this.checkRow(row);\n\n      return this.core.post(url, queries);\n    }\n\n    /**\n     * Delete checked items.\n     *\n     * @param  {string} message\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    deleteList(message, url, queries) {\n      message = message == null ? this.phoenix.__('phoenix.message.delete.confirm') : message;\n\n      if (message !== false) {\n        this.phoenix.confirm(message, isConfirm => {\n          if (isConfirm) {\n            this.core['delete'](url, queries);\n          }\n        });\n      } else {\n        this.core['delete'](url, queries);\n      }\n\n      return true;\n    }\n\n    /**\n     * Delete an itme.\n     *\n     * @param  {number} row\n     * @param  {string} msg\n     * @param  {string} url\n     * @param  {Object} queries\n     *\n     * @returns {boolean}\n     */\n    deleteRow(row, msg, url, queries) {\n      msg = msg || this.phoenix.__('phoenix.message.delete.confirm');\n\n      this.phoenix.confirm(msg, isConfirm => {\n        if (isConfirm) {\n          this.toggleAll(false);\n\n          this.checkRow(row);\n\n          this.deleteList(false, url, queries);\n        }\n      });\n\n      return true;\n    }\n\n    /**\n     * Toggle all checkboxes.\n     *\n     * @param  {boolean}          value     Checked or unchecked.\n     * @param  {number|boolean}   duration  Duration to check all.\n     */\n    toggleAll(value, duration = 0) {\n      const checkboxes = this.form.find('input.grid-checkbox[type=checkbox]');\n\n      $.each(checkboxes, function(i, e) {\n        if (duration) {\n          // A little pretty effect\n          setTimeout(function() {\n            e.checked = value;\n          }, (duration / checkboxes.length) * i);\n        }\n        else {\n          e.checked = value;\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Count checked checkboxes.\n     *\n     * @returns {int}\n     */\n    countChecked() {\n      return this.getChecked().length;\n    }\n\n    /**\n     * Get Checked boxes.\n     *\n     * @returns {Element[]}\n     */\n    getChecked() {\n      const checkboxes = this.form.find('input.grid-checkbox[type=checkbox]'),\n        result = [];\n\n      $.each(checkboxes, function(i, e) {\n        if (e.checked) {\n          result.push(e);\n        }\n      });\n\n      return result;\n    }\n\n    /**\n     * Validate there has one or more checked boxes.\n     *\n     * @param   {string}  msg\n     * @param   {Event}   event\n     *\n     * @returns {PhoenixGridElement}\n     */\n    hasChecked(msg, event) {\n      msg = msg || Phoenix.Translator.translate('phoenix.message.grid.checked');\n\n      if (!this.countChecked()) {\n        alert(msg);\n\n        // If you send event object as second argument, we will stop all actions.\n        if (event) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n\n        throw new Error(msg);\n      }\n\n      return this;\n    }\n\n    /**\n     * Reorder all.\n     *\n     * @param   {string}  url\n     * @param   {Object}  queries\n     *\n     * @returns {boolean}\n     */\n    reorderAll(url, queries) {\n      const self = this;\n      const origin = this.form.find('input[name=origin_ordering]');\n\n      // If origin exists, we diff them and only send changed group.\n      if (origin.length) {\n        const originOrdering = origin.val().split(',');\n        const inputs = this.form.find('.ordering-control input');\n\n        this.toggleAll(false);\n\n        inputs.each(function(i) {\n          const $this = $(this);\n\n          if ($this.val() !== originOrdering[i]) {\n            // Check self\n            self.checkRow($this.attr('data-order-row'));\n\n            const tr = $this.parents('tr');\n            const group = tr.attr('data-order-group');\n\n            // Check same group boxes\n            if (group !== '') {\n              tr.siblings('[data-order-group=' + group + ']')\n                .find('input.grid-checkbox')\n                .prop('checked', true);\n            }\n          }\n        });\n      }\n\n      return this.batch('reorder', url, queries);\n    }\n\n    /**\n     * Reorder items.\n     *\n     * @param  {int}     row\n     * @param  {int}     delta\n     * @param  {string}  url\n     * @param  {Object}  queries\n     *\n     * @returns {boolean}\n     */\n    reorder(row, delta, url, queries) {\n      queries = queries || {};\n      queries.delta = delta;\n\n      return this.doTask('reorder', row, url, queries);\n    }\n  }\n\n  window.PhoenixGrid = PhoenixGrid;\n\n})(jQuery);\n"],"file":"grid.js"}