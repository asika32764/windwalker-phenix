{"version":3,"sources":["phoenix.js","plugin.js","helper.js","ui.js","router.js","translator.js","legacy.js"],"names":["PhoenixCore","options","$","extend","constructor","defaultOptions","_listeners","waits","wait","resolve","completed","then","trigger","plugin","Array","isArray","forEach","use","p","is","undefined","Error","name","PhoenixPlugin","instance","install","boot","uninstall","event","handler","push","args","r","listeners","listener","value","document","data","removeData","type","uri","callback","d","Deferred","promise","when","self","fn","ele","window","jQuery","phoenix","toLowerCase","createProxies","resetProxies","created","ready","on","loaded","proxies","hasOwnProperty","origin","Object","defineProperties","get","set","PhoenixJQueryPlugin","selector","mainSelector","pluginName","pluginClass","PhoenixHelper","confirm","keepAlive","stopKeepAlive","loadScript","aliveHandle","message","confirmed","urls","promises","asset","getScript","url","addUriBase","cache","substr","time","setInterval","clearInterval","PhoenixUI","messageSelector","addMessage","messageContainer","validation","state","$input","help","$control","icon","$element","msg","container","button","showClass","attr","hideClass","find","iconShowClass","iconHideClass","hasClass","removeClass","addClass","hide","show","PhoenixRouter","e","route","query","addQuery","param","test","history","pushState","title","params","replaceState","back","forward","num","go","addRoute","PhoenixTranslator","trans","__","addLanguage","keys","text","key","normalize","length","sprintf","langs","translate","apply","replace","PhoenixLegacy","Theme","UI","formInited","gridInited","method","warn","Grid","obj","console"],"mappings":"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","file":"phoenix.js","sourcesContent":["/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n($ => {\r\n  class PhoenixCore {\r\n    /**\r\n     * Default options.\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    constructor(options = {}) {\r\n      this.options = $.extend(true, {}, this.constructor.defaultOptions, options);\r\n      this._listeners = {};\r\n      this.waits = [];\r\n\r\n      // Wait dom ready\r\n      this.wait(resolve => {\r\n        $(() => resolve());\r\n      });\r\n\r\n      // Ready\r\n      $(() => {\r\n        this.completed().then(() => this.trigger('loaded'));\r\n      });\r\n    }\r\n\r\n    use(plugin) {\r\n      if (Array.isArray(plugin)) {\r\n        plugin.forEach(p => this.use(p));\r\n        return this;\r\n      }\r\n\r\n      if (plugin.is === undefined) {\r\n        throw new Error(`Plugin: ${plugin.name} must instance of : ${PhoenixPlugin.name}`);\r\n      }\r\n\r\n      const instance = plugin.install(this);\r\n      instance.boot(this);\r\n\r\n      this.trigger('plugin.installed', instance);\r\n\r\n      return this;\r\n    }\r\n\r\n    detach(plugin) {\r\n      if (!plugin instanceof PhoenixPlugin) {\r\n        throw new Error('Plugin must instance of : ' + PhoenixPlugin.name);\r\n      }\r\n\r\n      plugin.uninstall(this);\r\n\r\n      this.trigger('plugin.uninstalled', plugin);\r\n\r\n      return this;\r\n    }\r\n\r\n    on(event, handler) {\r\n      if (this._listeners[event] === undefined) {\r\n        this._listeners[event] = [];\r\n      }\r\n\r\n      this._listeners[event].push(handler);\r\n\r\n      return this;\r\n    }\r\n\r\n    off(event) {\r\n      delete this._listeners[event];\r\n\r\n      return this;\r\n    }\r\n\r\n    trigger(event, args) {\r\n      const r = [];\r\n      this.listeners(event).forEach(listener => {\r\n        r.push(listener(args));\r\n      });\r\n\r\n      return r;\r\n    }\r\n\r\n    listeners(event) {\r\n      return this._listeners[event] === undefined ? [] : this._listeners[event];\r\n    }\r\n\r\n    data(name, value) {\r\n      if (value === undefined) {\r\n        return $(document).data(name);\r\n      }\r\n\r\n      $(document).data(name, value);\r\n\r\n      return this;\r\n    }\r\n\r\n    removeData(name) {\r\n      $(document).removeData(name);\r\n\r\n      return this;\r\n    }\r\n\r\n    uri(type) {\r\n      return this.data('phoenix.uri')[type];\r\n    }\r\n\r\n    asset(type) {\r\n      return this.uri('asset')[type];\r\n    }\r\n\r\n    wait(callback) {\r\n      const d = $.Deferred();\r\n\r\n      this.waits.push(d);\r\n\r\n      callback(() => d.resolve());\r\n\r\n      return d;\r\n    }\r\n\r\n    completed() {\r\n      const promise = $.when(...this.waits);\r\n\r\n      this.waits = [];\r\n\r\n      return promise;\r\n    }\r\n\r\n    plugin(name, plugin) {\r\n      const self = this;\r\n      $.fn[name] = function (...args) {\r\n        if (!this.data('phoenix.' + name)) {\r\n          const instance = new plugin(this, ...args);\r\n          this.data('phoenix.' + name, instance);\r\n          self.trigger('jquery.plugin.created', {name: name, ele: this, instance: instance});\r\n        }\r\n\r\n        const instance = this.data('phoenix.' + name);\r\n\r\n        self.trigger('jquery.plugin.get', {name: name, ele: this, instance: instance});\r\n\r\n        return instance;\r\n      };\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  window.PhoenixCore = PhoenixCore;\r\n})(jQuery);\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n($ => {\r\n  class PhoenixPlugin {\r\n    static get is() {\r\n      throw new Error('Please add \"is\" property to Phoenix Plugin: ' + this.name);\r\n    }\r\n\r\n    static get proxies() {\r\n      return {};\r\n    }\r\n\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    get options() {\r\n      return this.phoenix.options[this.constructor.is.toLowerCase()];\r\n    }\r\n\r\n    static install(phoenix) {\r\n      const self = new this;\r\n\r\n      this.createProxies(phoenix, self);\r\n      return self;\r\n    }\r\n\r\n    static uninstall(phoenix) {\r\n      const self = new this(phoenix);\r\n\r\n      this.resetProxies(phoenix, self);\r\n    }\r\n\r\n    constructor() {\r\n      //\r\n    }\r\n\r\n    boot(phoenix) {\r\n      this.phoenix = phoenix;\r\n\r\n      const name = this.constructor.is.toLowerCase();\r\n\r\n      // Merge to global options\r\n      this.phoenix.options[name] = $.extend(\r\n        true,\r\n        {},\r\n        this.constructor.defaultOptions,\r\n        this.phoenix.options[name]\r\n      );\r\n\r\n      // Created hook\r\n      this.created();\r\n\r\n      // DOM Ready hook\r\n      $(() => this.ready());\r\n\r\n      // Phoenix onload hook\r\n      this.phoenix.on('loaded', this.loaded);\r\n    }\r\n\r\n    created() {\r\n      //\r\n    }\r\n\r\n    ready() {\r\n      //\r\n    }\r\n\r\n    loaded() {\r\n      //\r\n    }\r\n\r\n    static createProxies(phoenix, plugin) {\r\n      if (plugin.constructor.proxies === undefined) {\r\n        return this;\r\n      }\r\n\r\n      this.resetProxies(phoenix, plugin);\r\n\r\n      phoenix[plugin.constructor.is] = plugin;\r\n\r\n      const proxies = plugin.constructor.proxies;\r\n\r\n      for (let name in proxies) {\r\n        if (!proxies.hasOwnProperty(name)) {\r\n          continue;\r\n        }\r\n\r\n        const origin = proxies[name];\r\n\r\n        if (phoenix[name] !== undefined) {\r\n          throw new Error(`Property: ${name} has exists in Phoenix instance.`);\r\n        }\r\n\r\n        if (typeof origin === 'function') {\r\n          phoenix[name] = origin;\r\n        } else if (plugin[origin] !== undefined) {\r\n          if (typeof plugin[origin] === 'function') {\r\n            phoenix[name] = function (...args) {\r\n              return plugin[origin](...args);\r\n            };\r\n          } else {\r\n            Object.defineProperties(phoenix, name, {\r\n              get: () => plugin[origin],\r\n              set: value => {\r\n                plugin[origin] = value;\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          throw new Error(`Proxy property: \"${origin}\" not found in Plugin: ${plugin.constructor.name}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    static resetProxies(phoenix, plugin) {\r\n      const name = typeof plugin === 'string' ? plugin : plugin.constructor.is;\r\n\r\n      if (phoenix[name]) {\r\n        plugin = phoenix[name];\r\n      }\r\n\r\n      if (plugin.constructor.proxies === undefined) {\r\n        return;\r\n      }\r\n\r\n      for (let name in plugin.constructor.proxies) {\r\n        delete phoenix[name];\r\n      }\r\n\r\n      delete phoenix[plugin.constructor.is];\r\n    }\r\n  }\r\n\r\n  class PhoenixJQueryPlugin extends PhoenixPlugin {\r\n    /**\r\n     * Plugin name.\r\n     * @returns {string|null}\r\n     */\r\n    static get pluginName() {\r\n      throw new Error('Please provide a plugin name.');\r\n    }\r\n\r\n    static get pluginClass() {\r\n      throw new Error('Please provide a class as plugin instance.');\r\n    }\r\n\r\n    static install(phoenix) {\r\n      const instance = super.install(phoenix);\r\n\r\n      phoenix.plugin(this.pluginName, this.pluginClass);\r\n\r\n      return instance;\r\n    }\r\n\r\n    createPlugin(selector, options = {}, ...args) {\r\n      options.mainSelector = selector;\r\n\r\n      return $(selector)[this.constructor.pluginName](options, this.phoenix, ...args);\r\n    }\r\n  }\r\n\r\n  window.PhoenixPlugin = PhoenixPlugin;\r\n  window.PhoenixJQueryPlugin = PhoenixJQueryPlugin;\r\n})(jQuery);\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n(($) => {\r\n  class PhoenixHelper extends PhoenixPlugin {\r\n    static get is() { return 'Helper'; }\r\n\r\n    static get proxies() {\r\n      return {\r\n        confirm: 'confirm',\r\n        keepAlive: 'keepAlive',\r\n        stopKeepAlive: 'stopKeepAlive',\r\n        loadScript: 'loadScript'\r\n      };\r\n    }\r\n\r\n    static get defaultOptions() {\r\n      return {}\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.aliveHandle = null;\r\n    }\r\n\r\n    /**\r\n     * Confirm popup.\r\n     *\r\n     * @param {string}   message\r\n     * @param {Function} callback\r\n     */\r\n    confirm(message, callback) {\r\n      message = message || 'Are you sure?';\r\n\r\n      const confirmed = confirm(message);\r\n\r\n      callback(confirmed);\r\n\r\n      return confirmed;\r\n    }\r\n\r\n    loadScript(urls) {\r\n      if (typeof urls === 'string') {\r\n        urls = [urls];\r\n      }\r\n\r\n      const promises = [];\r\n      const data = {};\r\n      data[this.phoenix.asset('version')] = '1';\r\n\r\n      urls.forEach(url => {\r\n        promises.push(\r\n          $.getScript({\r\n            url: this.addUriBase(url),\r\n            cache: true,\r\n            data\r\n          })\r\n        )\r\n      });\r\n\r\n      return $.when(...promises);\r\n    }\r\n\r\n    addUriBase(uri, type = 'path') {\r\n      if (uri.substr(0, 2) === '/' || uri.substr(0, 4) === 'http') {\r\n        return uri;\r\n      }\r\n\r\n      return this.phoenix.asset(type) + '/' + uri;\r\n    }\r\n\r\n    /**\r\n     * Keep alive.\r\n     *\r\n     * @param {string} url\r\n     * @param {Number} time\r\n     *\r\n     * @return {number}\r\n     */\r\n    keepAlive(url, time) {\r\n      return this.aliveHandle = window.setInterval(() => $.get('/'), time);\r\n    }\r\n\r\n    /**\r\n     * Stop keep alive\r\n     */\r\n    stopKeepAlive() {\r\n      clearInterval(this.aliveHandle);\r\n    }\r\n  }\r\n\r\n  window.PhoenixHelper = PhoenixHelper;\r\n})(jQuery);\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n(($) => {\r\n  class PhoenixUI extends PhoenixPlugin {\r\n    static get is() { return 'UI'; }\r\n\r\n    static get defaultOptions() {\r\n      return {\r\n        messageSelector: '.message-wrap'\r\n      };\r\n    }\r\n\r\n    static get proxies() {\r\n      return {\r\n        addMessage: 'renderMessage'\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.aliveHandle = null;\r\n    }\r\n\r\n    ready() {\r\n      super.ready();\r\n\r\n      this.messageContainer = $(this.options.messageSelector);\r\n    }\r\n\r\n    /**\r\n     * Show Validation response.\r\n     *\r\n     * @param {PhoenixValidation} validation\r\n     * @param {string}            state\r\n     * @param {jQuery}            $input\r\n     * @param {string}            help\r\n     */\r\n    showValidateResponse(validation, state, $input, help) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Add validate effect to input, just override this method to fit other templates.\r\n     *\r\n     * @param {jQuery} $control\r\n     * @param {jQuery} $input\r\n     * @param {string} icon\r\n     * @param {string} type\r\n     * @param {string} help\r\n     */\r\n    addValidateResponse($control, $input, icon, type, help) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Remove validation response.\r\n     *\r\n     * @param {jQuery} $element\r\n     */\r\n    removeValidateResponse($element) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Render message.\r\n     *\r\n     * @param {string|Array} msg\r\n     * @param {string}       type\r\n     */\r\n    renderMessage(msg, type) {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Remove all messages.\r\n     */\r\n    removeMessages() {\r\n      throw new Error('Please implement this method.');\r\n    }\r\n\r\n    /**\r\n     * Toggle filter bar.\r\n     *\r\n     * @param {jQuery} container\r\n     * @param {jQuery} button\r\n     */\r\n    toggleFilter(container, button) {\r\n      const showClass = button.attr('data-class-show') || 'btn-primary';\r\n      const hideClass = button.attr('data-class-hide') || 'btn-default';\r\n\r\n      const icon = button.find('span.filter-button-icon');\r\n      const iconShowClass = icon.attr('data-class-show') || 'fa fa-angle-up';\r\n      const iconHideClass = icon.attr('data-class-hide') || 'fa fa-angle-down';\r\n\r\n      if (container.hasClass('shown')) {\r\n        button.removeClass(showClass).addClass(hideClass);\r\n        container.hide('fast');\r\n        container.removeClass('shown');\r\n\r\n        icon.removeClass(iconShowClass).addClass(iconHideClass);\r\n      } else {\r\n        button.removeClass(hideClass).addClass(showClass);\r\n        container.show('fast');\r\n        container.addClass('shown');\r\n\r\n        icon.removeClass(iconHideClass).addClass(iconShowClass);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Confirm popup.\r\n     *\r\n     * TODO: Move to core.\r\n     *\r\n     * @param {string}   message\r\n     * @param {Function} callback\r\n     */\r\n    confirm(message, callback) {\r\n      message = message || 'Are you sure?';\r\n\r\n      const confirmed = confirm(message);\r\n\r\n      callback(confirmed);\r\n\r\n      return confirmed;\r\n    }\r\n\r\n    /**\r\n     * Keep alive.\r\n     *\r\n     * @param {string} url\r\n     * @param {Number} time\r\n     *\r\n     * @return {number}\r\n     */\r\n    keepAlive(url, time) {\r\n      return this.aliveHandle = window.setInterval(() => $.get('/'), time);\r\n    }\r\n\r\n    stopKeepAlive() {\r\n      clearInterval(this.aliveHandle);\r\n    }\r\n  }\r\n\r\n  window.PhoenixUI = PhoenixUI;\r\n})(jQuery);\r\n","/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n/**\r\n * Phoenix.Router\r\n */\r\n(($) => {\r\n  \"use strict\";\r\n\r\n  class PhoenixRouter extends PhoenixPlugin {\r\n    static get is() { return 'Router' }\r\n\r\n    static get proxies() {\r\n      return {\r\n        addRoute: 'add',\r\n        route: 'route'\r\n      };\r\n    }\r\n\r\n    ready() {\r\n      $(window).on('popstate', (e) => this.phoenix.on('router.popstate', e));\r\n    }\r\n\r\n    /**\r\n     * Add a route.\r\n     *\r\n     * @param route\r\n     * @param url\r\n     *\r\n     * @returns {PhoenixRouter}\r\n     */\r\n    add(route, url) {\r\n      const data = {};\r\n      data[route] = url;\r\n\r\n      this.phoenix.data('phoenix.routes', data);\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Get route.\r\n     *\r\n     * @param route\r\n     * @param query\r\n     * @returns {String|PhoenixRouter}\r\n     */\r\n    route(route, query = null) {\r\n      let url = this.phoenix.data('phoenix.routes')[route];\r\n\r\n      if (url === undefined) {\r\n        throw new Error('Route: \"' + route + '\" not found');\r\n      }\r\n\r\n      return this.addQuery(url, query);\r\n    }\r\n\r\n    addQuery(url, query = null) {\r\n      if (query === null) {\r\n        return url;\r\n      }\r\n\r\n      query = $.param(query);\r\n\r\n      return url + (/\\?/.test(url) ? '&' + query : '?' + query);\r\n    }\r\n\r\n    push(data) {\r\n      if (typeof data === 'string') {\r\n        data = {uri: data};\r\n      }\r\n\r\n      window.history.pushState(\r\n        data.state || null,\r\n        data.title || null,\r\n        data.uri || this.route(data.route, data.params)\r\n      );\r\n\r\n      return this;\r\n    }\r\n\r\n    replace(data) {\r\n      if (typeof data === 'string') {\r\n        data = {uri: data};\r\n      }\r\n\r\n      window.history.replaceState(\r\n        data.state || null,\r\n        data.title || null,\r\n        data.uri || this.route(data.route, data.params)\r\n      );\r\n\r\n      return this;\r\n    }\r\n\r\n    state() {\r\n      return window.history.state;\r\n    }\r\n\r\n    back() {\r\n      window.history.back();\r\n    }\r\n\r\n    forward() {\r\n      window.history.forward();\r\n    }\r\n\r\n    go(num) {\r\n      window.history.go(num);\r\n    }\r\n  }\r\n\r\n  window.PhoenixRouter = PhoenixRouter;\r\n})(jQuery);\r\n","/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n/**\r\n * Phoenix.Translator\r\n */\r\n(() => {\r\n  \"use strict\";\r\n\r\n  class PhoenixTranslator extends PhoenixPlugin {\r\n    static get is() { return 'Translator' }\r\n\r\n    static get proxies() {\r\n      return {\r\n        trans: 'translate',\r\n        __: 'translate',\r\n        addLanguage: 'addKey',\r\n      };\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.keys = {};\r\n    }\r\n\r\n    /**\r\n     * Translate a string.\r\n     *\r\n     * @param {string} text\r\n     * @param {Array}  args\r\n     * @returns {string}\r\n     */\r\n    translate(text, ...args) {\r\n      var key = this.normalize(text);\r\n\r\n      if (args.length) {\r\n        return this.sprintf(text, ...args);\r\n      }\r\n\r\n      const langs = this.phoenix.data('phoenix.languages');\r\n\r\n      if (langs[key]) {\r\n        return langs[key];\r\n      }\r\n\r\n      return text;\r\n    }\r\n\r\n    sprintf(text, ...args) {\r\n      args[0] = this.translate(text);\r\n\r\n      return sprintf.apply(sprintf, args);\r\n    }\r\n\r\n    /**\r\n     * Add language key.\r\n     *\r\n     * @param {string} key\r\n     * @param {string} value\r\n     *\r\n     * @return {Phoenix.Translator}\r\n     */\r\n    addKey(key, value) {\r\n      const data = {};\r\n      data[this.normalize(key)] = value;\r\n\r\n      this.phoenix.data('phoenix.languages', data);\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Replace all symbols to dot(.).\r\n     *\r\n     * @param {string} text\r\n     *\r\n     * @return {string}\r\n     */\r\n    normalize(text) {\r\n      return text.replace(/[^A-Z0-9]+/ig, '.');\r\n    }\r\n  }\r\n\r\n  window.PhoenixTranslator = PhoenixTranslator;\r\n})();\r\n","/**\r\n * Part of phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2018 ${ORGANIZATION}.\r\n * @license    __LICENSE__\r\n */\r\n\r\n(() => {\r\n  class PhoenixLegacy extends PhoenixPlugin {\r\n    static get is() {\r\n      return 'Legacy';\r\n    }\r\n\r\n    created() {\r\n      const phoenix = this.phoenix;\r\n\r\n      phoenix.Theme = phoenix.UI;\r\n\r\n      let formInited = false;\r\n      let gridInited = false;\r\n\r\n      phoenix.on('jquery.plugin.created', event => {\r\n        // Legacy Form polyfill\r\n        if (!formInited && event.name === 'form') {\r\n          ['delete', 'get', 'patch', 'post', 'put', 'sendDelete', 'submit'].forEach((method) => {\r\n            phoenix[method] = (...args) => {\r\n              this.constructor.warn('Phoenix', method);\r\n              event.instance[method](...args);\r\n            }\r\n          });\r\n\r\n          formInited = true;\r\n        }\r\n\r\n        // Legacy Grid polyfill\r\n        if (!gridInited && event.name === 'grid') {\r\n          ['toggleFilter', 'sort', 'checkRow', 'updateRow', 'doTask', 'batch', 'copyRow', 'deleteList', 'deleteRow',\r\n            'toggleAll', 'countChecked', 'getChecked', 'hasChecked', 'reorderAll', 'reorder']\r\n            .forEach((method) => {\r\n              phoenix.Grid[method] = (...args) => {\r\n                this.constructor.warn('Phoenix.Grid', method);\r\n                event.instance[method](...args);\r\n              }\r\n            });\r\n\r\n          gridInited = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    ready() {\r\n      super.ready();\r\n    }\r\n\r\n    static warn(obj, method) {\r\n      console.warn(`Calling ${obj}.${method}() is deprecated.`);\r\n    }\r\n  }\r\n\r\n  window.PhoenixLegacy = PhoenixLegacy;\r\n})();\r\n"]}