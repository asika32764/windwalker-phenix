{"version":3,"sources":["grid.js"],"names":["$","PhoenixGrid","grid","PhoenixGridElement","PhoenixJQueryPlugin","mainSelector","selector","search","container","button","clearButton","filter","sort","element","options","phoenix","form","extend","constructor","defaultOptions","core","ui","UI","Error","searchContainer","find","searchClearButton","filterContainer","filterButton","sortButtons","registerEvents","click","val","submit","toggleFilter","event","stopPropagation","preventDefault","self","currentTarget","ordering","direction","orderingInput","length","append","directionInput","put","row","value","ch","checked","url","queries","toggleAll","checkRow","patch","task","updateRow","post","message","__","confirm","isConfirm","msg","deleteList","duration","checkboxes","each","i","e","setTimeout","getChecked","result","push","Phoenix","Translator","translate","countChecked","alert","origin","originOrdering","split","inputs","$this","data","tr","parents","group","siblings","prop","batch","delta","doTask","window","jQuery"],"mappings":"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","file":"grid.js","sourcesContent":["/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n/**\r\n * PhoenixGrid\r\n */\r\n;(function($) {\r\n  \"use strict\";\r\n\r\n  class PhoenixGrid extends PhoenixJQueryPlugin {\r\n    static get is() { return 'Grid'; }\r\n\r\n    static get proxies() {\r\n      return {\r\n        grid: 'createPlugin'\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Plugin name.\r\n     * @returns {string}\r\n     */\r\n    static get pluginName() { return 'grid' }\r\n\r\n    static get pluginClass() { return PhoenixGridElement };\r\n\r\n    /**\r\n     * Default options.\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() { \r\n      return {};\r\n    }\r\n  }\r\n  \r\n  class PhoenixGridElement {\r\n    static get defaultOptions() {\r\n      return {\r\n        mainSelector: '',\r\n        selector: {\r\n          search: {\r\n            container: '.search-container',\r\n            button: '.search-button',\r\n            clearButton: '.search-clear-button'\r\n          },\r\n          filter: {\r\n            container: '.filter-container',\r\n            button: '.filter-toggle-button'\r\n          },\r\n          sort: {\r\n            button: 'a[data-sort-button]'\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    constructor(element, options, phoenix) {\r\n      this.form = element;\r\n      this.options = $.extend(true, {}, this.constructor.defaultOptions, options);\r\n      this.phoenix = phoenix;\r\n      this.core = phoenix.form(options.mainSelector);\r\n      this.ui = phoenix.UI;\r\n\r\n      if (!this.core) {\r\n        throw new Error('PhoenixGrid is dependent on PhoenixForm');\r\n      }\r\n\r\n      if (!this.ui) {\r\n        throw new Error('PhoenixGrid is dependent on PhoenixUI');\r\n      }\r\n\r\n      const selector = this.options.selector;\r\n\r\n      this.searchContainer = this.form.find(selector.search.container);\r\n      //this.searchButton = this.form.find(selector.search.button);\r\n      this.searchClearButton = this.form.find(selector.search.clearButton);\r\n      this.filterContainer = this.form.find(selector.filter.container);\r\n      this.filterButton = this.form.find(selector.filter.button);\r\n      this.sortButtons = this.form.find(selector.sort.button);\r\n\r\n      this.registerEvents();\r\n    }\r\n\r\n    /**\r\n     * Start this object and events.\r\n     */\r\n    registerEvents() {\r\n      this.searchClearButton.click(() => {\r\n        this.searchContainer.find('input, textarea, select').val('');\r\n        this.filterContainer.find('input, textarea, select').val('');\r\n\r\n        this.form.submit();\r\n      });\r\n\r\n      this.filterButton.click(event => {\r\n        this.toggleFilter();\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n      });\r\n\r\n      this.sortButtons.click(event => {\r\n        self.sort(event.currentTarget, event);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Toggle filter bar.\r\n     *\r\n     * @returns {PhoenixGridElement}\r\n     */\r\n    toggleFilter() {\r\n      this.ui.toggleFilter(this.filterContainer, this.filterButton);\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Sort two items.\r\n     *\r\n     * @param {string} ordering\r\n     * @param {string} direction\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    sort(ordering, direction) {\r\n      let orderingInput = this.form.find('input[name=list_ordering]');\r\n\r\n      if (!orderingInput.length) {\r\n        orderingInput = $('<input name=\"list_ordering\" type=\"hidden\" value=\"\" />');\r\n\r\n        this.form.append(orderingInput);\r\n      }\r\n\r\n      let directionInput = this.form.find('input[name=list_direction]');\r\n\r\n      if (!directionInput.length) {\r\n        directionInput = $('<input name=\"list_direction\" type=\"hidden\" value=\"\">');\r\n\r\n        this.form.append(directionInput);\r\n      }\r\n\r\n      orderingInput.val(ordering);\r\n      directionInput.val(direction);\r\n\r\n      return this.core.put();\r\n    }\r\n\r\n    /**\r\n     * Check a row's checkbox.\r\n     *\r\n     * @param {number}  row\r\n     * @param {boolean} value\r\n     */\r\n    checkRow(row, value = true) {\r\n      const ch = this.form.find('input.grid-checkbox[data-row-number=' + row + ']');\r\n\r\n      if (!ch.length) {\r\n        throw new Error('Checkbox of row: ' + row + ' not found.');\r\n      }\r\n\r\n      ch[0].checked = value;\r\n    }\r\n\r\n    /**\r\n     * Update a row.\r\n     *\r\n     * @param  {number} row\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    updateRow(row, url, queries) {\r\n      this.toggleAll(false);\r\n\r\n      this.checkRow(row);\r\n\r\n      return this.core.patch(url, queries);\r\n    }\r\n\r\n    /**\r\n     * Update a row with batch task.\r\n     *\r\n     * @param  {string} task\r\n     * @param  {number} row\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    doTask(task, row, url, queries) {\r\n      queries = queries || {};\r\n\r\n      queries.task = task;\r\n\r\n      return this.updateRow(row, url, queries);\r\n    }\r\n\r\n    /**\r\n     * Batch update items.\r\n     *\r\n     * @param  {string} task\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    batch(task, url, queries) {\r\n      queries = queries || {};\r\n\r\n      queries.task = task;\r\n\r\n      return this.core.patch(url, queries);\r\n    }\r\n\r\n    /**\r\n     * Copy a row.\r\n     *\r\n     * @param  {number} row\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    copyRow(row, url, queries) {\r\n      this.toggleAll(false);\r\n\r\n      this.checkRow(row);\r\n\r\n      return this.core.post(url, queries);\r\n    }\r\n\r\n    /**\r\n     * Delete checked items.\r\n     *\r\n     * @param  {string} message\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    deleteList(message, url, queries) {\r\n      message = message || this.phoenix.__('phoenix.message.delete.confirm');\r\n\r\n      this.phoenix.confirm(message, isConfirm => {\r\n        if (isConfirm) {\r\n          this.core['delete'](url, queries);\r\n        }\r\n      });\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Delete an itme.\r\n     *\r\n     * @param  {number} row\r\n     * @param  {string} msg\r\n     * @param  {string} url\r\n     * @param  {Object} queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    deleteRow(row, msg, url, queries) {\r\n      this.toggleAll(false);\r\n\r\n      this.checkRow(row);\r\n\r\n      return this.deleteList(msg, url, queries);\r\n    }\r\n\r\n    /**\r\n     * Toggle all checkboxes.\r\n     *\r\n     * @param  {boolean}          value     Checked or unchecked.\r\n     * @param  {number|boolean}   duration  Duration to check all.\r\n     */\r\n    toggleAll(value, duration = 100) {\r\n      const checkboxes = this.form.find('input.grid-checkbox[type=checkbox]');\r\n\r\n      $.each(checkboxes, function(i, e) {\r\n        if (duration) {\r\n          // A little pretty effect\r\n          setTimeout(function() {\r\n            e.checked = value;\r\n          }, (duration / checkboxes.length) * i);\r\n        }\r\n        else {\r\n          e.checked = value;\r\n        }\r\n      });\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Count checked checkboxes.\r\n     *\r\n     * @returns {int}\r\n     */\r\n    countChecked() {\r\n      return this.getChecked().length;\r\n    }\r\n\r\n    /**\r\n     * Get Checked boxes.\r\n     *\r\n     * @returns {Element[]}\r\n     */\r\n    getChecked() {\r\n      const checkboxes = this.form.find('input.grid-checkbox[type=checkbox]'),\r\n        result = [];\r\n\r\n      $.each(checkboxes, function(i, e) {\r\n        if (e.checked) {\r\n          result.push(e);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Validate there has one or more checked boxes.\r\n     *\r\n     * @param   {string}  msg\r\n     * @param   {Event}   event\r\n     *\r\n     * @returns {PhoenixGridElement}\r\n     */\r\n    hasChecked(msg, event) {\r\n      msg = msg || Phoenix.Translator.translate('phoenix.message.grid.checked');\r\n\r\n      if (!this.countChecked()) {\r\n        alert(msg);\r\n\r\n        // If you send event object as second argument, we will stop all actions.\r\n        if (event) {\r\n          event.stopPropagation();\r\n          event.preventDefault();\r\n        }\r\n\r\n        throw new Error(msg);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Reorder all.\r\n     *\r\n     * @param   {string}  url\r\n     * @param   {Object}  queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    reorderAll(url, queries) {\r\n      const self = this;\r\n      const origin = this.form.find('input[name=origin_ordering]');\r\n\r\n      // If origin exists, we diff them and only send changed group.\r\n      if (origin.length) {\r\n        const originOrdering = origin.val().split(',');\r\n        const inputs = this.form.find('.ordering-control input');\r\n\r\n        this.toggleAll(false);\r\n\r\n        inputs.each(function(i) {\r\n          const $this = $(this);\r\n\r\n          if ($this.val() !== originOrdering[i]) {\r\n            // Check self\r\n            self.checkRow($this.data('order-row'));\r\n\r\n            const tr = $this.parents('tr');\r\n            const group = tr.data('order-group');\r\n\r\n            // Check same group boxes\r\n            if (group !== '') {\r\n              tr.siblings('[data-order-group=' + group + ']')\r\n                .find('input.grid-checkbox')\r\n                .prop('checked', true);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      return this.batch('reorder', url, queries);\r\n    }\r\n\r\n    /**\r\n     * Reorder items.\r\n     *\r\n     * @param  {int}     row\r\n     * @param  {int}     delta\r\n     * @param  {string}  url\r\n     * @param  {Object}  queries\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    reorder(row, delta, url, queries) {\r\n      queries = queries || {};\r\n      queries.delta = delta;\r\n\r\n      return this.doTask('reorder', row, url, queries);\r\n    }\r\n  }\r\n\r\n  window.PhoenixGrid = PhoenixGrid;\r\n\r\n})(jQuery);\r\n"]}