{"version":3,"sources":["ui-bootstrap4.js"],"names":["$","PhoenixUIBootstrap4","validation","state","$input","help","$control","parents","first","$form","self","hasClass","addClass","removeValidateResponse","STATE_NONE","icon","color","STATE_SUCCESS","STATE_EMPTY","STATE_FAIL","setTimeout","addValidateResponse","type","find","attr","feedback","helpElement","options","feedbackContainer","tagName","prop","toLowerCase","append","parent","$element","remove","removeClass","msg","message","messageContainer","i","length","messageSelector","PhoenixUI","window","jQuery"],"mappings":"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","file":"ui-bootstrap4.js","sourcesContent":["/**\r\n * Part of Phoenix project.\r\n *\r\n * @copyright  Copyright (C) 2016 LYRASOFT. All rights reserved.\r\n * @license    GNU General Public License version 2 or later.\r\n */\r\n\r\n(($) => {\r\n  \"use strict\";\r\n\r\n  /**\r\n   * Bootstrap Theme\r\n   */\r\n  class PhoenixUIBootstrap4 extends PhoenixUI {\r\n    static get defaultOptions() {\r\n      return {\r\n        messageSelector: '.message-wrap',\r\n        feedbackContainer: 'tooltip'\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Show Validation response.\r\n     *\r\n     * @param {PhoenixValidation} validation\r\n     * @param {string}            state\r\n     * @param {jQuery}            $input\r\n     * @param {string}            help\r\n     */\r\n    showValidateResponse(validation, state, $input, help) {\r\n      const $control = $input.parents('.form-group').first();\r\n      const $form = $input.parents('form');\r\n      const self = this;\r\n\r\n      // Add class to form\r\n      if (!$form.hasClass('was-validated')) {\r\n        $form.addClass('was-validated');\r\n      }\r\n\r\n      this.removeValidateResponse($control);\r\n\r\n      if (state != validation.STATE_NONE) {\r\n        let icon, color;\r\n\r\n        switch (state) {\r\n          case validation.STATE_SUCCESS:\r\n            color = 'success';\r\n            icon = 'fa fa-check';\r\n            break;\r\n\r\n          case validation.STATE_EMPTY:\r\n            color = 'error';\r\n            icon = 'fa fa-remove fa-times';\r\n            break;\r\n\r\n          case validation.STATE_FAIL:\r\n            color = 'warning';\r\n            icon = 'fa fa-warning fa-exclamation-triangle';\r\n            break;\r\n        }\r\n\r\n        // Delay 100 to make sure addClass after removeClass\r\n        setTimeout(function() {\r\n          self.addValidateResponse($control, $input, icon, color, help);\r\n        }, 100);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add validate effect to input, just override this method to fit other templates.\r\n     *\r\n     * @param {jQuery} $control\r\n     * @param {jQuery} $input\r\n     * @param {string} icon\r\n     * @param {string} type\r\n     * @param {string} help\r\n     */\r\n    addValidateResponse($control, $input, icon, type, help) {\r\n      let color;\r\n\r\n      color = type === 'success' ? 'valid' : 'invalid';\r\n\r\n      $control.addClass(`has-${color}`);\r\n      $control.find('.form-control')\r\n        .addClass(`is-${color}`);\r\n      $control.find('.form-check-input')\r\n        .addClass(`is-${color}`);\r\n\r\n      if ($control.attr(`data-${type}-message`)) {\r\n        help = $control.attr(`data-${type}-message`);\r\n      }\r\n\r\n      if ($input.attr(`data-${type}-message`)) {\r\n        help = $input.attr(`data-${type}-message`);\r\n      }\r\n\r\n      if (help) {\r\n        const feedback = `<span class=\"${icon}\" aria-hidden=\"true\"></span>`;\r\n        const helpElement = $(`<small class=\"${color}-${this.options.feedbackContainer} form-control-${this.options.feedbackContainer}\">${feedback} ${help}</small>`);\r\n\r\n        const tagName = $input.prop('tagName').toLowerCase();\r\n\r\n        if (tagName === 'div') {\r\n          $input.append(helpElement);\r\n        } else {\r\n          $input.parent().append(helpElement);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove validation response.\r\n     *\r\n     * @param {jQuery} $element\r\n     */\r\n    removeValidateResponse($element) {\r\n      $element.find(`.form-control-${this.options.feedbackContainer}`).remove();\r\n      $element\r\n        .removeClass('has-invalid')\r\n        .removeClass('has-valid');\r\n      $element.find('.form-control')\r\n        .removeClass('is-invalid')\r\n        .removeClass('is-valid');\r\n    }\r\n\r\n    /**\r\n     * Render message.\r\n     *\r\n     * @param {string|Array} msg\r\n     * @param {string}       type\r\n     */\r\n    renderMessage(msg, type) {\r\n      type = type || 'info';\r\n\r\n      let message = this.messageContainer.find('div.alert.alert-' + type);\r\n      let i;\r\n\r\n      if (!message.length) {\r\n        message = $('<div class=\"alert alert-' + type + '\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"></div>');\r\n        this.messageContainer.append(message);\r\n      }\r\n\r\n      if (typeof msg === 'string') {\r\n        msg = [msg];\r\n      }\r\n\r\n      for (i in msg) {\r\n        message.append('<p>' + msg[i] + '</p>');\r\n      }\r\n    }\r\n  }\r\n\r\n  window.PhoenixUIBootstrap4 = PhoenixUIBootstrap4;\r\n\r\n})(jQuery);\r\n"]}